// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/congcongke/restapi/operations/artifact"
	"github.com/congcongke/restapi/operations/auditlog"
	"github.com/congcongke/restapi/operations/gc"
	"github.com/congcongke/restapi/operations/icon"
	"github.com/congcongke/restapi/operations/ping"
	"github.com/congcongke/restapi/operations/preheat"
	"github.com/congcongke/restapi/operations/project"
	"github.com/congcongke/restapi/operations/replication"
	"github.com/congcongke/restapi/operations/repository"
	"github.com/congcongke/restapi/operations/retention"
	"github.com/congcongke/restapi/operations/robot"
	"github.com/congcongke/restapi/operations/robotv1"
	"github.com/congcongke/restapi/operations/scan"
	"github.com/congcongke/restapi/operations/scan_all"
	"github.com/congcongke/restapi/operations/systeminfo"
)

// NewHarborAPI creates a new Harbor instance
func NewHarborAPI(spec *loads.Document) *HarborAPI {
	return &HarborAPI{
		handlers:             make(map[string]map[string]http.Handler),
		formats:              strfmt.Default,
		defaultConsumes:      "application/json",
		defaultProduces:      "application/json",
		customConsumers:      make(map[string]runtime.Consumer),
		customProducers:      make(map[string]runtime.Producer),
		operationMiddlewares: make(map[string]middleware.Builder),
		ServerShutdown:       func() {},
		spec:                 spec,
		ServeError:           errors.ServeError,
		BasicAuthenticator:   security.BasicAuth,
		APIKeyAuthenticator:  security.APIKeyAuth,
		BearerAuthenticator:  security.BearerAuth,
		JSONConsumer:         runtime.JSONConsumer(),
		JSONProducer:         runtime.JSONProducer(),
		BinProducer:          runtime.ByteStreamProducer(),
		TxtProducer:          runtime.TextProducer(),
		ArtifactCopyArtifactHandler: artifact.CopyArtifactHandlerFunc(func(params artifact.CopyArtifactParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ArtifactCopyArtifact has not yet been implemented")
		}),
		PreheatCreateInstanceHandler: preheat.CreateInstanceHandlerFunc(func(params preheat.CreateInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatCreateInstance has not yet been implemented")
		}),
		PreheatCreatePolicyHandler: preheat.CreatePolicyHandlerFunc(func(params preheat.CreatePolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatCreatePolicy has not yet been implemented")
		}),
		RobotCreateRobotHandler: robot.CreateRobotHandlerFunc(func(params robot.CreateRobotParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RobotCreateRobot has not yet been implemented")
		}),
		Robotv1CreateRobotV1Handler: robotv1.CreateRobotV1HandlerFunc(func(params robotv1.CreateRobotV1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation Robotv1CreateRobotV1 has not yet been implemented")
		}),
		PreheatDeleteInstanceHandler: preheat.DeleteInstanceHandlerFunc(func(params preheat.DeleteInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatDeleteInstance has not yet been implemented")
		}),
		PreheatDeletePolicyHandler: preheat.DeletePolicyHandlerFunc(func(params preheat.DeletePolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatDeletePolicy has not yet been implemented")
		}),
		RobotDeleteRobotHandler: robot.DeleteRobotHandlerFunc(func(params robot.DeleteRobotParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RobotDeleteRobot has not yet been implemented")
		}),
		Robotv1DeleteRobotV1Handler: robotv1.DeleteRobotV1HandlerFunc(func(params robotv1.DeleteRobotV1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation Robotv1DeleteRobotV1 has not yet been implemented")
		}),
		PreheatGetExecutionHandler: preheat.GetExecutionHandlerFunc(func(params preheat.GetExecutionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatGetExecution has not yet been implemented")
		}),
		PreheatGetInstanceHandler: preheat.GetInstanceHandlerFunc(func(params preheat.GetInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatGetInstance has not yet been implemented")
		}),
		PingGetPingHandler: ping.GetPingHandlerFunc(func(params ping.GetPingParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PingGetPing has not yet been implemented")
		}),
		PreheatGetPolicyHandler: preheat.GetPolicyHandlerFunc(func(params preheat.GetPolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatGetPolicy has not yet been implemented")
		}),
		PreheatGetPreheatLogHandler: preheat.GetPreheatLogHandlerFunc(func(params preheat.GetPreheatLogParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatGetPreheatLog has not yet been implemented")
		}),
		RobotGetRobotByIDHandler: robot.GetRobotByIDHandlerFunc(func(params robot.GetRobotByIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RobotGetRobotByID has not yet been implemented")
		}),
		Robotv1GetRobotByIDV1Handler: robotv1.GetRobotByIDV1HandlerFunc(func(params robotv1.GetRobotByIDV1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation Robotv1GetRobotByIDV1 has not yet been implemented")
		}),
		SysteminfoGetSysteminfoHandler: systeminfo.GetSysteminfoHandlerFunc(func(params systeminfo.GetSysteminfoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SysteminfoGetSysteminfo has not yet been implemented")
		}),
		SysteminfoGetSysteminfoGetcertHandler: systeminfo.GetSysteminfoGetcertHandlerFunc(func(params systeminfo.GetSysteminfoGetcertParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SysteminfoGetSysteminfoGetcert has not yet been implemented")
		}),
		SysteminfoGetSysteminfoVolumesHandler: systeminfo.GetSysteminfoVolumesHandlerFunc(func(params systeminfo.GetSysteminfoVolumesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SysteminfoGetSysteminfoVolumes has not yet been implemented")
		}),
		PreheatListExecutionsHandler: preheat.ListExecutionsHandlerFunc(func(params preheat.ListExecutionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatListExecutions has not yet been implemented")
		}),
		PreheatListInstancesHandler: preheat.ListInstancesHandlerFunc(func(params preheat.ListInstancesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatListInstances has not yet been implemented")
		}),
		PreheatListPoliciesHandler: preheat.ListPoliciesHandlerFunc(func(params preheat.ListPoliciesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatListPolicies has not yet been implemented")
		}),
		PreheatListProvidersHandler: preheat.ListProvidersHandlerFunc(func(params preheat.ListProvidersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatListProviders has not yet been implemented")
		}),
		PreheatListProvidersUnderProjectHandler: preheat.ListProvidersUnderProjectHandlerFunc(func(params preheat.ListProvidersUnderProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatListProvidersUnderProject has not yet been implemented")
		}),
		RobotListRobotHandler: robot.ListRobotHandlerFunc(func(params robot.ListRobotParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RobotListRobot has not yet been implemented")
		}),
		Robotv1ListRobotV1Handler: robotv1.ListRobotV1HandlerFunc(func(params robotv1.ListRobotV1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation Robotv1ListRobotV1 has not yet been implemented")
		}),
		PreheatListTasksHandler: preheat.ListTasksHandlerFunc(func(params preheat.ListTasksParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatListTasks has not yet been implemented")
		}),
		PreheatManualPreheatHandler: preheat.ManualPreheatHandlerFunc(func(params preheat.ManualPreheatParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatManualPreheat has not yet been implemented")
		}),
		PreheatPingInstancesHandler: preheat.PingInstancesHandlerFunc(func(params preheat.PingInstancesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatPingInstances has not yet been implemented")
		}),
		RobotRefreshSecHandler: robot.RefreshSecHandlerFunc(func(params robot.RefreshSecParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RobotRefreshSec has not yet been implemented")
		}),
		PreheatStopExecutionHandler: preheat.StopExecutionHandlerFunc(func(params preheat.StopExecutionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatStopExecution has not yet been implemented")
		}),
		PreheatUpdateInstanceHandler: preheat.UpdateInstanceHandlerFunc(func(params preheat.UpdateInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatUpdateInstance has not yet been implemented")
		}),
		PreheatUpdatePolicyHandler: preheat.UpdatePolicyHandlerFunc(func(params preheat.UpdatePolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PreheatUpdatePolicy has not yet been implemented")
		}),
		RobotUpdateRobotHandler: robot.UpdateRobotHandlerFunc(func(params robot.UpdateRobotParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RobotUpdateRobot has not yet been implemented")
		}),
		Robotv1UpdateRobotV1Handler: robotv1.UpdateRobotV1HandlerFunc(func(params robotv1.UpdateRobotV1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation Robotv1UpdateRobotV1 has not yet been implemented")
		}),
		ArtifactAddLabelHandler: artifact.AddLabelHandlerFunc(func(params artifact.AddLabelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ArtifactAddLabel has not yet been implemented")
		}),
		GCCreateGCScheduleHandler: gc.CreateGCScheduleHandlerFunc(func(params gc.CreateGCScheduleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GCCreateGCSchedule has not yet been implemented")
		}),
		ProjectCreateProjectHandler: project.CreateProjectHandlerFunc(func(params project.CreateProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ProjectCreateProject has not yet been implemented")
		}),
		RetentionCreateRetentionHandler: retention.CreateRetentionHandlerFunc(func(params retention.CreateRetentionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RetentionCreateRetention has not yet been implemented")
		}),
		ScanAllCreateScanAllScheduleHandler: scan_all.CreateScanAllScheduleHandlerFunc(func(params scan_all.CreateScanAllScheduleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ScanAllCreateScanAllSchedule has not yet been implemented")
		}),
		ArtifactCreateTagHandler: artifact.CreateTagHandlerFunc(func(params artifact.CreateTagParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ArtifactCreateTag has not yet been implemented")
		}),
		ArtifactDeleteArtifactHandler: artifact.DeleteArtifactHandlerFunc(func(params artifact.DeleteArtifactParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ArtifactDeleteArtifact has not yet been implemented")
		}),
		ProjectDeleteProjectHandler: project.DeleteProjectHandlerFunc(func(params project.DeleteProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ProjectDeleteProject has not yet been implemented")
		}),
		RepositoryDeleteRepositoryHandler: repository.DeleteRepositoryHandlerFunc(func(params repository.DeleteRepositoryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RepositoryDeleteRepository has not yet been implemented")
		}),
		ArtifactDeleteTagHandler: artifact.DeleteTagHandlerFunc(func(params artifact.DeleteTagParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ArtifactDeleteTag has not yet been implemented")
		}),
		ArtifactGetAdditionHandler: artifact.GetAdditionHandlerFunc(func(params artifact.GetAdditionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ArtifactGetAddition has not yet been implemented")
		}),
		ArtifactGetArtifactHandler: artifact.GetArtifactHandlerFunc(func(params artifact.GetArtifactParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ArtifactGetArtifact has not yet been implemented")
		}),
		GCGetGCHandler: gc.GetGCHandlerFunc(func(params gc.GetGCParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GCGetGC has not yet been implemented")
		}),
		GCGetGCHistoryHandler: gc.GetGCHistoryHandlerFunc(func(params gc.GetGCHistoryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GCGetGCHistory has not yet been implemented")
		}),
		GCGetGCLogHandler: gc.GetGCLogHandlerFunc(func(params gc.GetGCLogParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GCGetGCLog has not yet been implemented")
		}),
		GCGetGCScheduleHandler: gc.GetGCScheduleHandlerFunc(func(params gc.GetGCScheduleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GCGetGCSchedule has not yet been implemented")
		}),
		IconGetIconHandler: icon.GetIconHandlerFunc(func(params icon.GetIconParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation IconGetIcon has not yet been implemented")
		}),
		ScanAllGetLatestScanAllMetricsHandler: scan_all.GetLatestScanAllMetricsHandlerFunc(func(params scan_all.GetLatestScanAllMetricsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ScanAllGetLatestScanAllMetrics has not yet been implemented")
		}),
		ScanAllGetLatestScheduledScanAllMetricsHandler: scan_all.GetLatestScheduledScanAllMetricsHandlerFunc(func(params scan_all.GetLatestScheduledScanAllMetricsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ScanAllGetLatestScheduledScanAllMetrics has not yet been implemented")
		}),
		ProjectGetLogsHandler: project.GetLogsHandlerFunc(func(params project.GetLogsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ProjectGetLogs has not yet been implemented")
		}),
		ProjectGetProjectHandler: project.GetProjectHandlerFunc(func(params project.GetProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ProjectGetProject has not yet been implemented")
		}),
		ProjectGetProjectDeletableHandler: project.GetProjectDeletableHandlerFunc(func(params project.GetProjectDeletableParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ProjectGetProjectDeletable has not yet been implemented")
		}),
		ProjectGetProjectSummaryHandler: project.GetProjectSummaryHandlerFunc(func(params project.GetProjectSummaryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ProjectGetProjectSummary has not yet been implemented")
		}),
		RetentionGetRentenitionMetadataHandler: retention.GetRentenitionMetadataHandlerFunc(func(params retention.GetRentenitionMetadataParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RetentionGetRentenitionMetadata has not yet been implemented")
		}),
		ReplicationGetReplicationExecutionHandler: replication.GetReplicationExecutionHandlerFunc(func(params replication.GetReplicationExecutionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ReplicationGetReplicationExecution has not yet been implemented")
		}),
		ReplicationGetReplicationLogHandler: replication.GetReplicationLogHandlerFunc(func(params replication.GetReplicationLogParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ReplicationGetReplicationLog has not yet been implemented")
		}),
		ScanGetReportLogHandler: scan.GetReportLogHandlerFunc(func(params scan.GetReportLogParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ScanGetReportLog has not yet been implemented")
		}),
		RepositoryGetRepositoryHandler: repository.GetRepositoryHandlerFunc(func(params repository.GetRepositoryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RepositoryGetRepository has not yet been implemented")
		}),
		RetentionGetRetentionHandler: retention.GetRetentionHandlerFunc(func(params retention.GetRetentionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RetentionGetRetention has not yet been implemented")
		}),
		RetentionGetRetentionTaskLogHandler: retention.GetRetentionTaskLogHandlerFunc(func(params retention.GetRetentionTaskLogParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RetentionGetRetentionTaskLog has not yet been implemented")
		}),
		ScanAllGetScanAllScheduleHandler: scan_all.GetScanAllScheduleHandlerFunc(func(params scan_all.GetScanAllScheduleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ScanAllGetScanAllSchedule has not yet been implemented")
		}),
		ArtifactGetVulnerabilitiesAdditionHandler: artifact.GetVulnerabilitiesAdditionHandlerFunc(func(params artifact.GetVulnerabilitiesAdditionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ArtifactGetVulnerabilitiesAddition has not yet been implemented")
		}),
		ProjectHeadProjectHandler: project.HeadProjectHandlerFunc(func(params project.HeadProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ProjectHeadProject has not yet been implemented")
		}),
		ArtifactListArtifactsHandler: artifact.ListArtifactsHandlerFunc(func(params artifact.ListArtifactsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ArtifactListArtifacts has not yet been implemented")
		}),
		AuditlogListAuditLogsHandler: auditlog.ListAuditLogsHandlerFunc(func(params auditlog.ListAuditLogsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation AuditlogListAuditLogs has not yet been implemented")
		}),
		ProjectListProjectsHandler: project.ListProjectsHandlerFunc(func(params project.ListProjectsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ProjectListProjects has not yet been implemented")
		}),
		ReplicationListReplicationExecutionsHandler: replication.ListReplicationExecutionsHandlerFunc(func(params replication.ListReplicationExecutionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ReplicationListReplicationExecutions has not yet been implemented")
		}),
		ReplicationListReplicationTasksHandler: replication.ListReplicationTasksHandlerFunc(func(params replication.ListReplicationTasksParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ReplicationListReplicationTasks has not yet been implemented")
		}),
		RepositoryListRepositoriesHandler: repository.ListRepositoriesHandlerFunc(func(params repository.ListRepositoriesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RepositoryListRepositories has not yet been implemented")
		}),
		RetentionListRetentionExecutionsHandler: retention.ListRetentionExecutionsHandlerFunc(func(params retention.ListRetentionExecutionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RetentionListRetentionExecutions has not yet been implemented")
		}),
		RetentionListRetentionTasksHandler: retention.ListRetentionTasksHandlerFunc(func(params retention.ListRetentionTasksParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RetentionListRetentionTasks has not yet been implemented")
		}),
		ArtifactListTagsHandler: artifact.ListTagsHandlerFunc(func(params artifact.ListTagsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ArtifactListTags has not yet been implemented")
		}),
		RetentionOperateRetentionExecutionHandler: retention.OperateRetentionExecutionHandlerFunc(func(params retention.OperateRetentionExecutionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RetentionOperateRetentionExecution has not yet been implemented")
		}),
		ArtifactRemoveLabelHandler: artifact.RemoveLabelHandlerFunc(func(params artifact.RemoveLabelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ArtifactRemoveLabel has not yet been implemented")
		}),
		ScanScanArtifactHandler: scan.ScanArtifactHandlerFunc(func(params scan.ScanArtifactParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ScanScanArtifact has not yet been implemented")
		}),
		ReplicationStartReplicationHandler: replication.StartReplicationHandlerFunc(func(params replication.StartReplicationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ReplicationStartReplication has not yet been implemented")
		}),
		ReplicationStopReplicationHandler: replication.StopReplicationHandlerFunc(func(params replication.StopReplicationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ReplicationStopReplication has not yet been implemented")
		}),
		RetentionTriggerRetentionExecutionHandler: retention.TriggerRetentionExecutionHandlerFunc(func(params retention.TriggerRetentionExecutionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RetentionTriggerRetentionExecution has not yet been implemented")
		}),
		GCUpdateGCScheduleHandler: gc.UpdateGCScheduleHandlerFunc(func(params gc.UpdateGCScheduleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GCUpdateGCSchedule has not yet been implemented")
		}),
		ProjectUpdateProjectHandler: project.UpdateProjectHandlerFunc(func(params project.UpdateProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ProjectUpdateProject has not yet been implemented")
		}),
		RepositoryUpdateRepositoryHandler: repository.UpdateRepositoryHandlerFunc(func(params repository.UpdateRepositoryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RepositoryUpdateRepository has not yet been implemented")
		}),
		RetentionUpdateRetentionHandler: retention.UpdateRetentionHandlerFunc(func(params retention.UpdateRetentionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RetentionUpdateRetention has not yet been implemented")
		}),
		ScanAllUpdateScanAllScheduleHandler: scan_all.UpdateScanAllScheduleHandlerFunc(func(params scan_all.UpdateScanAllScheduleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ScanAllUpdateScanAllSchedule has not yet been implemented")
		}),

		// Applies when the Authorization header is set with the Basic scheme
		BasicAuth: func(user string, pass string) (interface{}, error) {
			return nil, errors.NotImplemented("basic auth  (basic) has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*HarborAPI These APIs provide services for manipulating Harbor project. */
type HarborAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// operationMiddlewares middleware for operations
	operationMiddlewares map[string]middleware.Builder

	// BeforePrepare is called before the Prepare of the operation
	BeforePrepare func(context.Context, string, interface{}) middleware.Responder

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// BinProducer registers a producer for a "application/octet-stream" mime type
	BinProducer runtime.Producer
	// TxtProducer registers a producer for a "text/plain" mime type
	TxtProducer runtime.Producer

	// BasicAuth registers a function that takes username and password and returns a principal
	// it performs authentication with basic auth
	BasicAuth func(string, string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// ArtifactCopyArtifactHandler sets the operation handler for the copy artifact operation
	ArtifactCopyArtifactHandler artifact.CopyArtifactHandler
	// PreheatCreateInstanceHandler sets the operation handler for the create instance operation
	PreheatCreateInstanceHandler preheat.CreateInstanceHandler
	// PreheatCreatePolicyHandler sets the operation handler for the create policy operation
	PreheatCreatePolicyHandler preheat.CreatePolicyHandler
	// RobotCreateRobotHandler sets the operation handler for the create robot operation
	RobotCreateRobotHandler robot.CreateRobotHandler
	// Robotv1CreateRobotV1Handler sets the operation handler for the create robot v1 operation
	Robotv1CreateRobotV1Handler robotv1.CreateRobotV1Handler
	// PreheatDeleteInstanceHandler sets the operation handler for the delete instance operation
	PreheatDeleteInstanceHandler preheat.DeleteInstanceHandler
	// PreheatDeletePolicyHandler sets the operation handler for the delete policy operation
	PreheatDeletePolicyHandler preheat.DeletePolicyHandler
	// RobotDeleteRobotHandler sets the operation handler for the delete robot operation
	RobotDeleteRobotHandler robot.DeleteRobotHandler
	// Robotv1DeleteRobotV1Handler sets the operation handler for the delete robot v1 operation
	Robotv1DeleteRobotV1Handler robotv1.DeleteRobotV1Handler
	// PreheatGetExecutionHandler sets the operation handler for the get execution operation
	PreheatGetExecutionHandler preheat.GetExecutionHandler
	// PreheatGetInstanceHandler sets the operation handler for the get instance operation
	PreheatGetInstanceHandler preheat.GetInstanceHandler
	// PingGetPingHandler sets the operation handler for the get ping operation
	PingGetPingHandler ping.GetPingHandler
	// PreheatGetPolicyHandler sets the operation handler for the get policy operation
	PreheatGetPolicyHandler preheat.GetPolicyHandler
	// PreheatGetPreheatLogHandler sets the operation handler for the get preheat log operation
	PreheatGetPreheatLogHandler preheat.GetPreheatLogHandler
	// RobotGetRobotByIDHandler sets the operation handler for the get robot by ID operation
	RobotGetRobotByIDHandler robot.GetRobotByIDHandler
	// Robotv1GetRobotByIDV1Handler sets the operation handler for the get robot by ID v1 operation
	Robotv1GetRobotByIDV1Handler robotv1.GetRobotByIDV1Handler
	// SysteminfoGetSysteminfoHandler sets the operation handler for the get systeminfo operation
	SysteminfoGetSysteminfoHandler systeminfo.GetSysteminfoHandler
	// SysteminfoGetSysteminfoGetcertHandler sets the operation handler for the get systeminfo getcert operation
	SysteminfoGetSysteminfoGetcertHandler systeminfo.GetSysteminfoGetcertHandler
	// SysteminfoGetSysteminfoVolumesHandler sets the operation handler for the get systeminfo volumes operation
	SysteminfoGetSysteminfoVolumesHandler systeminfo.GetSysteminfoVolumesHandler
	// PreheatListExecutionsHandler sets the operation handler for the list executions operation
	PreheatListExecutionsHandler preheat.ListExecutionsHandler
	// PreheatListInstancesHandler sets the operation handler for the list instances operation
	PreheatListInstancesHandler preheat.ListInstancesHandler
	// PreheatListPoliciesHandler sets the operation handler for the list policies operation
	PreheatListPoliciesHandler preheat.ListPoliciesHandler
	// PreheatListProvidersHandler sets the operation handler for the list providers operation
	PreheatListProvidersHandler preheat.ListProvidersHandler
	// PreheatListProvidersUnderProjectHandler sets the operation handler for the list providers under project operation
	PreheatListProvidersUnderProjectHandler preheat.ListProvidersUnderProjectHandler
	// RobotListRobotHandler sets the operation handler for the list robot operation
	RobotListRobotHandler robot.ListRobotHandler
	// Robotv1ListRobotV1Handler sets the operation handler for the list robot v1 operation
	Robotv1ListRobotV1Handler robotv1.ListRobotV1Handler
	// PreheatListTasksHandler sets the operation handler for the list tasks operation
	PreheatListTasksHandler preheat.ListTasksHandler
	// PreheatManualPreheatHandler sets the operation handler for the manual preheat operation
	PreheatManualPreheatHandler preheat.ManualPreheatHandler
	// PreheatPingInstancesHandler sets the operation handler for the ping instances operation
	PreheatPingInstancesHandler preheat.PingInstancesHandler
	// RobotRefreshSecHandler sets the operation handler for the refresh sec operation
	RobotRefreshSecHandler robot.RefreshSecHandler
	// PreheatStopExecutionHandler sets the operation handler for the stop execution operation
	PreheatStopExecutionHandler preheat.StopExecutionHandler
	// PreheatUpdateInstanceHandler sets the operation handler for the update instance operation
	PreheatUpdateInstanceHandler preheat.UpdateInstanceHandler
	// PreheatUpdatePolicyHandler sets the operation handler for the update policy operation
	PreheatUpdatePolicyHandler preheat.UpdatePolicyHandler
	// RobotUpdateRobotHandler sets the operation handler for the update robot operation
	RobotUpdateRobotHandler robot.UpdateRobotHandler
	// Robotv1UpdateRobotV1Handler sets the operation handler for the update robot v1 operation
	Robotv1UpdateRobotV1Handler robotv1.UpdateRobotV1Handler
	// ArtifactAddLabelHandler sets the operation handler for the add label operation
	ArtifactAddLabelHandler artifact.AddLabelHandler
	// GCCreateGCScheduleHandler sets the operation handler for the create GC schedule operation
	GCCreateGCScheduleHandler gc.CreateGCScheduleHandler
	// ProjectCreateProjectHandler sets the operation handler for the create project operation
	ProjectCreateProjectHandler project.CreateProjectHandler
	// RetentionCreateRetentionHandler sets the operation handler for the create retention operation
	RetentionCreateRetentionHandler retention.CreateRetentionHandler
	// ScanAllCreateScanAllScheduleHandler sets the operation handler for the create scan all schedule operation
	ScanAllCreateScanAllScheduleHandler scan_all.CreateScanAllScheduleHandler
	// ArtifactCreateTagHandler sets the operation handler for the create tag operation
	ArtifactCreateTagHandler artifact.CreateTagHandler
	// ArtifactDeleteArtifactHandler sets the operation handler for the delete artifact operation
	ArtifactDeleteArtifactHandler artifact.DeleteArtifactHandler
	// ProjectDeleteProjectHandler sets the operation handler for the delete project operation
	ProjectDeleteProjectHandler project.DeleteProjectHandler
	// RepositoryDeleteRepositoryHandler sets the operation handler for the delete repository operation
	RepositoryDeleteRepositoryHandler repository.DeleteRepositoryHandler
	// ArtifactDeleteTagHandler sets the operation handler for the delete tag operation
	ArtifactDeleteTagHandler artifact.DeleteTagHandler
	// ArtifactGetAdditionHandler sets the operation handler for the get addition operation
	ArtifactGetAdditionHandler artifact.GetAdditionHandler
	// ArtifactGetArtifactHandler sets the operation handler for the get artifact operation
	ArtifactGetArtifactHandler artifact.GetArtifactHandler
	// GCGetGCHandler sets the operation handler for the get GC operation
	GCGetGCHandler gc.GetGCHandler
	// GCGetGCHistoryHandler sets the operation handler for the get GC history operation
	GCGetGCHistoryHandler gc.GetGCHistoryHandler
	// GCGetGCLogHandler sets the operation handler for the get GC log operation
	GCGetGCLogHandler gc.GetGCLogHandler
	// GCGetGCScheduleHandler sets the operation handler for the get GC schedule operation
	GCGetGCScheduleHandler gc.GetGCScheduleHandler
	// IconGetIconHandler sets the operation handler for the get icon operation
	IconGetIconHandler icon.GetIconHandler
	// ScanAllGetLatestScanAllMetricsHandler sets the operation handler for the get latest scan all metrics operation
	ScanAllGetLatestScanAllMetricsHandler scan_all.GetLatestScanAllMetricsHandler
	// ScanAllGetLatestScheduledScanAllMetricsHandler sets the operation handler for the get latest scheduled scan all metrics operation
	ScanAllGetLatestScheduledScanAllMetricsHandler scan_all.GetLatestScheduledScanAllMetricsHandler
	// ProjectGetLogsHandler sets the operation handler for the get logs operation
	ProjectGetLogsHandler project.GetLogsHandler
	// ProjectGetProjectHandler sets the operation handler for the get project operation
	ProjectGetProjectHandler project.GetProjectHandler
	// ProjectGetProjectDeletableHandler sets the operation handler for the get project deletable operation
	ProjectGetProjectDeletableHandler project.GetProjectDeletableHandler
	// ProjectGetProjectSummaryHandler sets the operation handler for the get project summary operation
	ProjectGetProjectSummaryHandler project.GetProjectSummaryHandler
	// RetentionGetRentenitionMetadataHandler sets the operation handler for the get rentenition metadata operation
	RetentionGetRentenitionMetadataHandler retention.GetRentenitionMetadataHandler
	// ReplicationGetReplicationExecutionHandler sets the operation handler for the get replication execution operation
	ReplicationGetReplicationExecutionHandler replication.GetReplicationExecutionHandler
	// ReplicationGetReplicationLogHandler sets the operation handler for the get replication log operation
	ReplicationGetReplicationLogHandler replication.GetReplicationLogHandler
	// ScanGetReportLogHandler sets the operation handler for the get report log operation
	ScanGetReportLogHandler scan.GetReportLogHandler
	// RepositoryGetRepositoryHandler sets the operation handler for the get repository operation
	RepositoryGetRepositoryHandler repository.GetRepositoryHandler
	// RetentionGetRetentionHandler sets the operation handler for the get retention operation
	RetentionGetRetentionHandler retention.GetRetentionHandler
	// RetentionGetRetentionTaskLogHandler sets the operation handler for the get retention task log operation
	RetentionGetRetentionTaskLogHandler retention.GetRetentionTaskLogHandler
	// ScanAllGetScanAllScheduleHandler sets the operation handler for the get scan all schedule operation
	ScanAllGetScanAllScheduleHandler scan_all.GetScanAllScheduleHandler
	// ArtifactGetVulnerabilitiesAdditionHandler sets the operation handler for the get vulnerabilities addition operation
	ArtifactGetVulnerabilitiesAdditionHandler artifact.GetVulnerabilitiesAdditionHandler
	// ProjectHeadProjectHandler sets the operation handler for the head project operation
	ProjectHeadProjectHandler project.HeadProjectHandler
	// ArtifactListArtifactsHandler sets the operation handler for the list artifacts operation
	ArtifactListArtifactsHandler artifact.ListArtifactsHandler
	// AuditlogListAuditLogsHandler sets the operation handler for the list audit logs operation
	AuditlogListAuditLogsHandler auditlog.ListAuditLogsHandler
	// ProjectListProjectsHandler sets the operation handler for the list projects operation
	ProjectListProjectsHandler project.ListProjectsHandler
	// ReplicationListReplicationExecutionsHandler sets the operation handler for the list replication executions operation
	ReplicationListReplicationExecutionsHandler replication.ListReplicationExecutionsHandler
	// ReplicationListReplicationTasksHandler sets the operation handler for the list replication tasks operation
	ReplicationListReplicationTasksHandler replication.ListReplicationTasksHandler
	// RepositoryListRepositoriesHandler sets the operation handler for the list repositories operation
	RepositoryListRepositoriesHandler repository.ListRepositoriesHandler
	// RetentionListRetentionExecutionsHandler sets the operation handler for the list retention executions operation
	RetentionListRetentionExecutionsHandler retention.ListRetentionExecutionsHandler
	// RetentionListRetentionTasksHandler sets the operation handler for the list retention tasks operation
	RetentionListRetentionTasksHandler retention.ListRetentionTasksHandler
	// ArtifactListTagsHandler sets the operation handler for the list tags operation
	ArtifactListTagsHandler artifact.ListTagsHandler
	// RetentionOperateRetentionExecutionHandler sets the operation handler for the operate retention execution operation
	RetentionOperateRetentionExecutionHandler retention.OperateRetentionExecutionHandler
	// ArtifactRemoveLabelHandler sets the operation handler for the remove label operation
	ArtifactRemoveLabelHandler artifact.RemoveLabelHandler
	// ScanScanArtifactHandler sets the operation handler for the scan artifact operation
	ScanScanArtifactHandler scan.ScanArtifactHandler
	// ReplicationStartReplicationHandler sets the operation handler for the start replication operation
	ReplicationStartReplicationHandler replication.StartReplicationHandler
	// ReplicationStopReplicationHandler sets the operation handler for the stop replication operation
	ReplicationStopReplicationHandler replication.StopReplicationHandler
	// RetentionTriggerRetentionExecutionHandler sets the operation handler for the trigger retention execution operation
	RetentionTriggerRetentionExecutionHandler retention.TriggerRetentionExecutionHandler
	// GCUpdateGCScheduleHandler sets the operation handler for the update GC schedule operation
	GCUpdateGCScheduleHandler gc.UpdateGCScheduleHandler
	// ProjectUpdateProjectHandler sets the operation handler for the update project operation
	ProjectUpdateProjectHandler project.UpdateProjectHandler
	// RepositoryUpdateRepositoryHandler sets the operation handler for the update repository operation
	RepositoryUpdateRepositoryHandler repository.UpdateRepositoryHandler
	// RetentionUpdateRetentionHandler sets the operation handler for the update retention operation
	RetentionUpdateRetentionHandler retention.UpdateRetentionHandler
	// ScanAllUpdateScanAllScheduleHandler sets the operation handler for the update scan all schedule operation
	ScanAllUpdateScanAllScheduleHandler scan_all.UpdateScanAllScheduleHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *HarborAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *HarborAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *HarborAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *HarborAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *HarborAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *HarborAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *HarborAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the HarborAPI
func (o *HarborAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}

	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.BasicAuth == nil {
		unregistered = append(unregistered, "BasicAuth")
	}

	if o.ArtifactCopyArtifactHandler == nil {
		unregistered = append(unregistered, "artifact.CopyArtifactHandler")
	}

	if o.PreheatCreateInstanceHandler == nil {
		unregistered = append(unregistered, "preheat.CreateInstanceHandler")
	}

	if o.PreheatCreatePolicyHandler == nil {
		unregistered = append(unregistered, "preheat.CreatePolicyHandler")
	}

	if o.RobotCreateRobotHandler == nil {
		unregistered = append(unregistered, "robot.CreateRobotHandler")
	}

	if o.Robotv1CreateRobotV1Handler == nil {
		unregistered = append(unregistered, "robotv1.CreateRobotV1Handler")
	}

	if o.PreheatDeleteInstanceHandler == nil {
		unregistered = append(unregistered, "preheat.DeleteInstanceHandler")
	}

	if o.PreheatDeletePolicyHandler == nil {
		unregistered = append(unregistered, "preheat.DeletePolicyHandler")
	}

	if o.RobotDeleteRobotHandler == nil {
		unregistered = append(unregistered, "robot.DeleteRobotHandler")
	}

	if o.Robotv1DeleteRobotV1Handler == nil {
		unregistered = append(unregistered, "robotv1.DeleteRobotV1Handler")
	}

	if o.PreheatGetExecutionHandler == nil {
		unregistered = append(unregistered, "preheat.GetExecutionHandler")
	}

	if o.PreheatGetInstanceHandler == nil {
		unregistered = append(unregistered, "preheat.GetInstanceHandler")
	}

	if o.PingGetPingHandler == nil {
		unregistered = append(unregistered, "ping.GetPingHandler")
	}

	if o.PreheatGetPolicyHandler == nil {
		unregistered = append(unregistered, "preheat.GetPolicyHandler")
	}

	if o.PreheatGetPreheatLogHandler == nil {
		unregistered = append(unregistered, "preheat.GetPreheatLogHandler")
	}

	if o.RobotGetRobotByIDHandler == nil {
		unregistered = append(unregistered, "robot.GetRobotByIDHandler")
	}

	if o.Robotv1GetRobotByIDV1Handler == nil {
		unregistered = append(unregistered, "robotv1.GetRobotByIDV1Handler")
	}

	if o.SysteminfoGetSysteminfoHandler == nil {
		unregistered = append(unregistered, "systeminfo.GetSysteminfoHandler")
	}

	if o.SysteminfoGetSysteminfoGetcertHandler == nil {
		unregistered = append(unregistered, "systeminfo.GetSysteminfoGetcertHandler")
	}

	if o.SysteminfoGetSysteminfoVolumesHandler == nil {
		unregistered = append(unregistered, "systeminfo.GetSysteminfoVolumesHandler")
	}

	if o.PreheatListExecutionsHandler == nil {
		unregistered = append(unregistered, "preheat.ListExecutionsHandler")
	}

	if o.PreheatListInstancesHandler == nil {
		unregistered = append(unregistered, "preheat.ListInstancesHandler")
	}

	if o.PreheatListPoliciesHandler == nil {
		unregistered = append(unregistered, "preheat.ListPoliciesHandler")
	}

	if o.PreheatListProvidersHandler == nil {
		unregistered = append(unregistered, "preheat.ListProvidersHandler")
	}

	if o.PreheatListProvidersUnderProjectHandler == nil {
		unregistered = append(unregistered, "preheat.ListProvidersUnderProjectHandler")
	}

	if o.RobotListRobotHandler == nil {
		unregistered = append(unregistered, "robot.ListRobotHandler")
	}

	if o.Robotv1ListRobotV1Handler == nil {
		unregistered = append(unregistered, "robotv1.ListRobotV1Handler")
	}

	if o.PreheatListTasksHandler == nil {
		unregistered = append(unregistered, "preheat.ListTasksHandler")
	}

	if o.PreheatManualPreheatHandler == nil {
		unregistered = append(unregistered, "preheat.ManualPreheatHandler")
	}

	if o.PreheatPingInstancesHandler == nil {
		unregistered = append(unregistered, "preheat.PingInstancesHandler")
	}

	if o.RobotRefreshSecHandler == nil {
		unregistered = append(unregistered, "robot.RefreshSecHandler")
	}

	if o.PreheatStopExecutionHandler == nil {
		unregistered = append(unregistered, "preheat.StopExecutionHandler")
	}

	if o.PreheatUpdateInstanceHandler == nil {
		unregistered = append(unregistered, "preheat.UpdateInstanceHandler")
	}

	if o.PreheatUpdatePolicyHandler == nil {
		unregistered = append(unregistered, "preheat.UpdatePolicyHandler")
	}

	if o.RobotUpdateRobotHandler == nil {
		unregistered = append(unregistered, "robot.UpdateRobotHandler")
	}

	if o.Robotv1UpdateRobotV1Handler == nil {
		unregistered = append(unregistered, "robotv1.UpdateRobotV1Handler")
	}

	if o.ArtifactAddLabelHandler == nil {
		unregistered = append(unregistered, "artifact.AddLabelHandler")
	}

	if o.GCCreateGCScheduleHandler == nil {
		unregistered = append(unregistered, "gc.CreateGCScheduleHandler")
	}

	if o.ProjectCreateProjectHandler == nil {
		unregistered = append(unregistered, "project.CreateProjectHandler")
	}

	if o.RetentionCreateRetentionHandler == nil {
		unregistered = append(unregistered, "retention.CreateRetentionHandler")
	}

	if o.ScanAllCreateScanAllScheduleHandler == nil {
		unregistered = append(unregistered, "scan_all.CreateScanAllScheduleHandler")
	}

	if o.ArtifactCreateTagHandler == nil {
		unregistered = append(unregistered, "artifact.CreateTagHandler")
	}

	if o.ArtifactDeleteArtifactHandler == nil {
		unregistered = append(unregistered, "artifact.DeleteArtifactHandler")
	}

	if o.ProjectDeleteProjectHandler == nil {
		unregistered = append(unregistered, "project.DeleteProjectHandler")
	}

	if o.RepositoryDeleteRepositoryHandler == nil {
		unregistered = append(unregistered, "repository.DeleteRepositoryHandler")
	}

	if o.ArtifactDeleteTagHandler == nil {
		unregistered = append(unregistered, "artifact.DeleteTagHandler")
	}

	if o.ArtifactGetAdditionHandler == nil {
		unregistered = append(unregistered, "artifact.GetAdditionHandler")
	}

	if o.ArtifactGetArtifactHandler == nil {
		unregistered = append(unregistered, "artifact.GetArtifactHandler")
	}

	if o.GCGetGCHandler == nil {
		unregistered = append(unregistered, "gc.GetGCHandler")
	}

	if o.GCGetGCHistoryHandler == nil {
		unregistered = append(unregistered, "gc.GetGCHistoryHandler")
	}

	if o.GCGetGCLogHandler == nil {
		unregistered = append(unregistered, "gc.GetGCLogHandler")
	}

	if o.GCGetGCScheduleHandler == nil {
		unregistered = append(unregistered, "gc.GetGCScheduleHandler")
	}

	if o.IconGetIconHandler == nil {
		unregistered = append(unregistered, "icon.GetIconHandler")
	}

	if o.ScanAllGetLatestScanAllMetricsHandler == nil {
		unregistered = append(unregistered, "scan_all.GetLatestScanAllMetricsHandler")
	}

	if o.ScanAllGetLatestScheduledScanAllMetricsHandler == nil {
		unregistered = append(unregistered, "scan_all.GetLatestScheduledScanAllMetricsHandler")
	}

	if o.ProjectGetLogsHandler == nil {
		unregistered = append(unregistered, "project.GetLogsHandler")
	}

	if o.ProjectGetProjectHandler == nil {
		unregistered = append(unregistered, "project.GetProjectHandler")
	}

	if o.ProjectGetProjectDeletableHandler == nil {
		unregistered = append(unregistered, "project.GetProjectDeletableHandler")
	}

	if o.ProjectGetProjectSummaryHandler == nil {
		unregistered = append(unregistered, "project.GetProjectSummaryHandler")
	}

	if o.RetentionGetRentenitionMetadataHandler == nil {
		unregistered = append(unregistered, "retention.GetRentenitionMetadataHandler")
	}

	if o.ReplicationGetReplicationExecutionHandler == nil {
		unregistered = append(unregistered, "replication.GetReplicationExecutionHandler")
	}

	if o.ReplicationGetReplicationLogHandler == nil {
		unregistered = append(unregistered, "replication.GetReplicationLogHandler")
	}

	if o.ScanGetReportLogHandler == nil {
		unregistered = append(unregistered, "scan.GetReportLogHandler")
	}

	if o.RepositoryGetRepositoryHandler == nil {
		unregistered = append(unregistered, "repository.GetRepositoryHandler")
	}

	if o.RetentionGetRetentionHandler == nil {
		unregistered = append(unregistered, "retention.GetRetentionHandler")
	}

	if o.RetentionGetRetentionTaskLogHandler == nil {
		unregistered = append(unregistered, "retention.GetRetentionTaskLogHandler")
	}

	if o.ScanAllGetScanAllScheduleHandler == nil {
		unregistered = append(unregistered, "scan_all.GetScanAllScheduleHandler")
	}

	if o.ArtifactGetVulnerabilitiesAdditionHandler == nil {
		unregistered = append(unregistered, "artifact.GetVulnerabilitiesAdditionHandler")
	}

	if o.ProjectHeadProjectHandler == nil {
		unregistered = append(unregistered, "project.HeadProjectHandler")
	}

	if o.ArtifactListArtifactsHandler == nil {
		unregistered = append(unregistered, "artifact.ListArtifactsHandler")
	}

	if o.AuditlogListAuditLogsHandler == nil {
		unregistered = append(unregistered, "auditlog.ListAuditLogsHandler")
	}

	if o.ProjectListProjectsHandler == nil {
		unregistered = append(unregistered, "project.ListProjectsHandler")
	}

	if o.ReplicationListReplicationExecutionsHandler == nil {
		unregistered = append(unregistered, "replication.ListReplicationExecutionsHandler")
	}

	if o.ReplicationListReplicationTasksHandler == nil {
		unregistered = append(unregistered, "replication.ListReplicationTasksHandler")
	}

	if o.RepositoryListRepositoriesHandler == nil {
		unregistered = append(unregistered, "repository.ListRepositoriesHandler")
	}

	if o.RetentionListRetentionExecutionsHandler == nil {
		unregistered = append(unregistered, "retention.ListRetentionExecutionsHandler")
	}

	if o.RetentionListRetentionTasksHandler == nil {
		unregistered = append(unregistered, "retention.ListRetentionTasksHandler")
	}

	if o.ArtifactListTagsHandler == nil {
		unregistered = append(unregistered, "artifact.ListTagsHandler")
	}

	if o.RetentionOperateRetentionExecutionHandler == nil {
		unregistered = append(unregistered, "retention.OperateRetentionExecutionHandler")
	}

	if o.ArtifactRemoveLabelHandler == nil {
		unregistered = append(unregistered, "artifact.RemoveLabelHandler")
	}

	if o.ScanScanArtifactHandler == nil {
		unregistered = append(unregistered, "scan.ScanArtifactHandler")
	}

	if o.ReplicationStartReplicationHandler == nil {
		unregistered = append(unregistered, "replication.StartReplicationHandler")
	}

	if o.ReplicationStopReplicationHandler == nil {
		unregistered = append(unregistered, "replication.StopReplicationHandler")
	}

	if o.RetentionTriggerRetentionExecutionHandler == nil {
		unregistered = append(unregistered, "retention.TriggerRetentionExecutionHandler")
	}

	if o.GCUpdateGCScheduleHandler == nil {
		unregistered = append(unregistered, "gc.UpdateGCScheduleHandler")
	}

	if o.ProjectUpdateProjectHandler == nil {
		unregistered = append(unregistered, "project.UpdateProjectHandler")
	}

	if o.RepositoryUpdateRepositoryHandler == nil {
		unregistered = append(unregistered, "repository.UpdateRepositoryHandler")
	}

	if o.RetentionUpdateRetentionHandler == nil {
		unregistered = append(unregistered, "retention.UpdateRetentionHandler")
	}

	if o.ScanAllUpdateScanAllScheduleHandler == nil {
		unregistered = append(unregistered, "scan_all.UpdateScanAllScheduleHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *HarborAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *HarborAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {

		case "basic":
			result[name] = o.BasicAuthenticator(o.BasicAuth)

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *HarborAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *HarborAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *HarborAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer

		case "text/plain":
			result["text/plain"] = o.TxtProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *HarborAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the harbor API
func (o *HarborAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *HarborAPI) handler(operation string, next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		h := next
		if b, ok := o.operationMiddlewares[operation]; ok {
			h = b(h)
		}

		h.ServeHTTP(w, r)
	})
}

func (o *HarborAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name}/repositories/{repository_name}/artifacts"] = o.handler("CopyArtifact", artifact.NewCopyArtifact(o.context, o.ArtifactCopyArtifactHandler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/p2p/preheat/instances"] = o.handler("CreateInstance", preheat.NewCreateInstance(o.context, o.PreheatCreateInstanceHandler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name}/preheat/policies"] = o.handler("CreatePolicy", preheat.NewCreatePolicy(o.context, o.PreheatCreatePolicyHandler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/robots"] = o.handler("CreateRobot", robot.NewCreateRobot(o.context, o.RobotCreateRobotHandler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name_or_id}/robots"] = o.handler("CreateRobotV1", robotv1.NewCreateRobotV1(o.context, o.Robotv1CreateRobotV1Handler))

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/p2p/preheat/instances/{preheat_instance_name}"] = o.handler("DeleteInstance", preheat.NewDeleteInstance(o.context, o.PreheatDeleteInstanceHandler))

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}"] = o.handler("DeletePolicy", preheat.NewDeletePolicy(o.context, o.PreheatDeletePolicyHandler))

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/robots/{robot_id}"] = o.handler("DeleteRobot", robot.NewDeleteRobot(o.context, o.RobotDeleteRobotHandler))

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name_or_id}/robots/{robot_id}"] = o.handler("DeleteRobotV1", robotv1.NewDeleteRobotV1(o.context, o.Robotv1DeleteRobotV1Handler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}"] = o.handler("GetExecution", preheat.NewGetExecution(o.context, o.PreheatGetExecutionHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/p2p/preheat/instances/{preheat_instance_name}"] = o.handler("GetInstance", preheat.NewGetInstance(o.context, o.PreheatGetInstanceHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ping"] = o.handler("GetPing", ping.NewGetPing(o.context, o.PingGetPingHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}"] = o.handler("GetPolicy", preheat.NewGetPolicy(o.context, o.PreheatGetPolicyHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs"] = o.handler("GetPreheatLog", preheat.NewGetPreheatLog(o.context, o.PreheatGetPreheatLogHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/robots/{robot_id}"] = o.handler("GetRobotByID", robot.NewGetRobotByID(o.context, o.RobotGetRobotByIDHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/robots/{robot_id}"] = o.handler("GetRobotByIDV1", robotv1.NewGetRobotByIDV1(o.context, o.Robotv1GetRobotByIDV1Handler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/systeminfo"] = o.handler("GetSysteminfo", systeminfo.NewGetSysteminfo(o.context, o.SysteminfoGetSysteminfoHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/systeminfo/getcert"] = o.handler("GetSysteminfoGetcert", systeminfo.NewGetSysteminfoGetcert(o.context, o.SysteminfoGetSysteminfoGetcertHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/systeminfo/volumes"] = o.handler("GetSysteminfoVolumes", systeminfo.NewGetSysteminfoVolumes(o.context, o.SysteminfoGetSysteminfoVolumesHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions"] = o.handler("ListExecutions", preheat.NewListExecutions(o.context, o.PreheatListExecutionsHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/p2p/preheat/instances"] = o.handler("ListInstances", preheat.NewListInstances(o.context, o.PreheatListInstancesHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/preheat/policies"] = o.handler("ListPolicies", preheat.NewListPolicies(o.context, o.PreheatListPoliciesHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/p2p/preheat/providers"] = o.handler("ListProviders", preheat.NewListProviders(o.context, o.PreheatListProvidersHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/preheat/providers"] = o.handler("ListProvidersUnderProject", preheat.NewListProvidersUnderProject(o.context, o.PreheatListProvidersUnderProjectHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/robots"] = o.handler("ListRobot", robot.NewListRobot(o.context, o.RobotListRobotHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/robots"] = o.handler("ListRobotV1", robotv1.NewListRobotV1(o.context, o.Robotv1ListRobotV1Handler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks"] = o.handler("ListTasks", preheat.NewListTasks(o.context, o.PreheatListTasksHandler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}"] = o.handler("ManualPreheat", preheat.NewManualPreheat(o.context, o.PreheatManualPreheatHandler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/p2p/preheat/instances/ping"] = o.handler("PingInstances", preheat.NewPingInstances(o.context, o.PreheatPingInstancesHandler))

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/robots/{robot_id}"] = o.handler("RefreshSec", robot.NewRefreshSec(o.context, o.RobotRefreshSecHandler))

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}"] = o.handler("StopExecution", preheat.NewStopExecution(o.context, o.PreheatStopExecutionHandler))

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/p2p/preheat/instances/{preheat_instance_name}"] = o.handler("UpdateInstance", preheat.NewUpdateInstance(o.context, o.PreheatUpdateInstanceHandler))

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}"] = o.handler("UpdatePolicy", preheat.NewUpdatePolicy(o.context, o.PreheatUpdatePolicyHandler))

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/robots/{robot_id}"] = o.handler("UpdateRobot", robot.NewUpdateRobot(o.context, o.RobotUpdateRobotHandler))

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/projects/{project_name_or_id}/robots/{robot_id}"] = o.handler("UpdateRobotV1", robotv1.NewUpdateRobotV1(o.context, o.Robotv1UpdateRobotV1Handler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels"] = o.handler("AddLabel", artifact.NewAddLabel(o.context, o.ArtifactAddLabelHandler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/system/gc/schedule"] = o.handler("CreateGCSchedule", gc.NewCreateGCSchedule(o.context, o.GCCreateGCScheduleHandler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects"] = o.handler("CreateProject", project.NewCreateProject(o.context, o.ProjectCreateProjectHandler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/retentions"] = o.handler("CreateRetention", retention.NewCreateRetention(o.context, o.RetentionCreateRetentionHandler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/system/scanAll/schedule"] = o.handler("CreateScanAllSchedule", scan_all.NewCreateScanAllSchedule(o.context, o.ScanAllCreateScanAllScheduleHandler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags"] = o.handler("CreateTag", artifact.NewCreateTag(o.context, o.ArtifactCreateTagHandler))

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}"] = o.handler("DeleteArtifact", artifact.NewDeleteArtifact(o.context, o.ArtifactDeleteArtifactHandler))

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name_or_id}"] = o.handler("DeleteProject", project.NewDeleteProject(o.context, o.ProjectDeleteProjectHandler))

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name}/repositories/{repository_name}"] = o.handler("DeleteRepository", repository.NewDeleteRepository(o.context, o.RepositoryDeleteRepositoryHandler))

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}"] = o.handler("DeleteTag", artifact.NewDeleteTag(o.context, o.ArtifactDeleteTagHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}"] = o.handler("GetAddition", artifact.NewGetAddition(o.context, o.ArtifactGetAdditionHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}"] = o.handler("GetArtifact", artifact.NewGetArtifact(o.context, o.ArtifactGetArtifactHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/system/gc/{gc_id}"] = o.handler("GetGC", gc.NewGetGC(o.context, o.GCGetGCHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/system/gc"] = o.handler("GetGCHistory", gc.NewGetGCHistory(o.context, o.GCGetGCHistoryHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/system/gc/{gc_id}/log"] = o.handler("GetGCLog", gc.NewGetGCLog(o.context, o.GCGetGCLogHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/system/gc/schedule"] = o.handler("GetGCSchedule", gc.NewGetGCSchedule(o.context, o.GCGetGCScheduleHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/icons/{digest}"] = o.handler("GetIcon", icon.NewGetIcon(o.context, o.IconGetIconHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/scans/all/metrics"] = o.handler("GetLatestScanAllMetrics", scan_all.NewGetLatestScanAllMetrics(o.context, o.ScanAllGetLatestScanAllMetricsHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/scans/schedule/metrics"] = o.handler("GetLatestScheduledScanAllMetrics", scan_all.NewGetLatestScheduledScanAllMetrics(o.context, o.ScanAllGetLatestScheduledScanAllMetricsHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/logs"] = o.handler("GetLogs", project.NewGetLogs(o.context, o.ProjectGetLogsHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}"] = o.handler("GetProject", project.NewGetProject(o.context, o.ProjectGetProjectHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/_deletable"] = o.handler("GetProjectDeletable", project.NewGetProjectDeletable(o.context, o.ProjectGetProjectDeletableHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/summary"] = o.handler("GetProjectSummary", project.NewGetProjectSummary(o.context, o.ProjectGetProjectSummaryHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/retentions/metadatas"] = o.handler("GetRentenitionMetadata", retention.NewGetRentenitionMetadata(o.context, o.RetentionGetRentenitionMetadataHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replication/executions/{id}"] = o.handler("GetReplicationExecution", replication.NewGetReplicationExecution(o.context, o.ReplicationGetReplicationExecutionHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replication/executions/{id}/tasks/{task_id}/log"] = o.handler("GetReplicationLog", replication.NewGetReplicationLog(o.context, o.ReplicationGetReplicationLogHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log"] = o.handler("GetReportLog", scan.NewGetReportLog(o.context, o.ScanGetReportLogHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories/{repository_name}"] = o.handler("GetRepository", repository.NewGetRepository(o.context, o.RepositoryGetRepositoryHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/retentions/{id}"] = o.handler("GetRetention", retention.NewGetRetention(o.context, o.RetentionGetRetentionHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/retentions/{id}/executions/{eid}/tasks/{tid}"] = o.handler("GetRetentionTaskLog", retention.NewGetRetentionTaskLog(o.context, o.RetentionGetRetentionTaskLogHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/system/scanAll/schedule"] = o.handler("GetScanAllSchedule", scan_all.NewGetScanAllSchedule(o.context, o.ScanAllGetScanAllScheduleHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities"] = o.handler("GetVulnerabilitiesAddition", artifact.NewGetVulnerabilitiesAddition(o.context, o.ArtifactGetVulnerabilitiesAdditionHandler))

	if o.handlers["HEAD"] == nil {
		o.handlers["HEAD"] = make(map[string]http.Handler)
	}
	o.handlers["HEAD"]["/projects"] = o.handler("HeadProject", project.NewHeadProject(o.context, o.ProjectHeadProjectHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories/{repository_name}/artifacts"] = o.handler("ListArtifacts", artifact.NewListArtifacts(o.context, o.ArtifactListArtifactsHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/audit-logs"] = o.handler("ListAuditLogs", auditlog.NewListAuditLogs(o.context, o.AuditlogListAuditLogsHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects"] = o.handler("ListProjects", project.NewListProjects(o.context, o.ProjectListProjectsHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replication/executions"] = o.handler("ListReplicationExecutions", replication.NewListReplicationExecutions(o.context, o.ReplicationListReplicationExecutionsHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replication/executions/{id}/tasks"] = o.handler("ListReplicationTasks", replication.NewListReplicationTasks(o.context, o.ReplicationListReplicationTasksHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories"] = o.handler("ListRepositories", repository.NewListRepositories(o.context, o.RepositoryListRepositoriesHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/retentions/{id}/executions"] = o.handler("ListRetentionExecutions", retention.NewListRetentionExecutions(o.context, o.RetentionListRetentionExecutionsHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/retentions/{id}/executions/{eid}/tasks"] = o.handler("ListRetentionTasks", retention.NewListRetentionTasks(o.context, o.RetentionListRetentionTasksHandler))

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags"] = o.handler("ListTags", artifact.NewListTags(o.context, o.ArtifactListTagsHandler))

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/retentions/{id}/executions/{eid}"] = o.handler("OperateRetentionExecution", retention.NewOperateRetentionExecution(o.context, o.RetentionOperateRetentionExecutionHandler))

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}"] = o.handler("RemoveLabel", artifact.NewRemoveLabel(o.context, o.ArtifactRemoveLabelHandler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan"] = o.handler("ScanArtifact", scan.NewScanArtifact(o.context, o.ScanScanArtifactHandler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/replication/executions"] = o.handler("StartReplication", replication.NewStartReplication(o.context, o.ReplicationStartReplicationHandler))

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/replication/executions/{id}"] = o.handler("StopReplication", replication.NewStopReplication(o.context, o.ReplicationStopReplicationHandler))

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/retentions/{id}/executions"] = o.handler("TriggerRetentionExecution", retention.NewTriggerRetentionExecution(o.context, o.RetentionTriggerRetentionExecutionHandler))

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/system/gc/schedule"] = o.handler("UpdateGCSchedule", gc.NewUpdateGCSchedule(o.context, o.GCUpdateGCScheduleHandler))

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/projects/{project_name_or_id}"] = o.handler("UpdateProject", project.NewUpdateProject(o.context, o.ProjectUpdateProjectHandler))

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/projects/{project_name}/repositories/{repository_name}"] = o.handler("UpdateRepository", repository.NewUpdateRepository(o.context, o.RepositoryUpdateRepositoryHandler))

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/retentions/{id}"] = o.handler("UpdateRetention", retention.NewUpdateRetention(o.context, o.RetentionUpdateRetentionHandler))

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/system/scanAll/schedule"] = o.handler("UpdateScanAllSchedule", scan_all.NewUpdateScanAllSchedule(o.context, o.ScanAllUpdateScanAllScheduleHandler))

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *HarborAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *HarborAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *HarborAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *HarborAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// RegisterMiddleware allows you to add (or override) a middleware for operation.
func (o *HarborAPI) RegisterMiddleware(operation string, builder middleware.Builder) {
	o.operationMiddlewares[operation] = builder
}
