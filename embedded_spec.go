// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "These APIs provide services for manipulating Harbor project.",
    "title": "Harbor API",
    "version": "2.0"
  },
  "host": "localhost",
  "basePath": "/api/v2.0",
  "paths": {
    "/audit-logs": {
      "get": {
        "description": "This endpoint let user see the recent operation logs of the projects which he is member of\n",
        "tags": [
          "auditlog"
        ],
        "summary": "Get recent logs of the projects which the user is a member of",
        "operationId": "listAuditLogs",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditLog"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of auditlogs"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/icons/{digest}": {
      "get": {
        "description": "Get the artifact icon with the specified digest. As the original icon image is resized and encoded before returning, the parameter \"digest\" in the path doesn't match the hash of the returned content",
        "tags": [
          "icon"
        ],
        "summary": "Get artifact icon",
        "operationId": "getIcon",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/digest"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Icon"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/p2p/preheat/instances": {
      "get": {
        "description": "List P2P provider instances",
        "tags": [
          "preheat"
        ],
        "summary": "List P2P provider instances",
        "operationId": "ListInstances",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Instance"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of preheating provider instances"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create p2p provider instances",
        "tags": [
          "preheat"
        ],
        "summary": "Create p2p provider instances",
        "operationId": "CreateInstance",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The JSON object of instance.",
            "name": "instance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/p2p/preheat/instances/ping": {
      "post": {
        "description": "This endpoint checks status of a instance, the instance can be given by ID or Endpoint URL (together with credential)\n",
        "tags": [
          "preheat"
        ],
        "summary": "Ping status of a instance.",
        "operationId": "PingInstances",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The JSON object of instance.",
            "name": "instance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "description": "Instance not found (when instance is provided by ID)."
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/p2p/preheat/instances/{preheat_instance_name}": {
      "get": {
        "description": "Get a P2P provider instance",
        "tags": [
          "preheat"
        ],
        "summary": "Get a P2P provider instance",
        "operationId": "GetInstance",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/instanceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update the specified P2P provider instance",
        "tags": [
          "preheat"
        ],
        "summary": "Update the specified P2P provider instance",
        "operationId": "UpdateInstance",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/instanceName"
          },
          {
            "description": "The instance to update",
            "name": "instance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete the specified P2P provider instance",
        "tags": [
          "preheat"
        ],
        "summary": "Delete the specified P2P provider instance",
        "operationId": "DeleteInstance",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/instanceName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/p2p/preheat/providers": {
      "get": {
        "description": "List P2P providers",
        "tags": [
          "preheat"
        ],
        "summary": "List P2P providers",
        "operationId": "ListProviders",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Metadata"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/ping": {
      "get": {
        "description": "This API simply replies a pong to indicate the process to handle API is up, disregarding the health status of dependent components.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "ping"
        ],
        "summary": "Ping Harbor to check if it's alive.",
        "responses": {
          "200": {
            "description": "The API server is alive",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "description": "This endpoint returns projects created by Harbor.",
        "tags": [
          "project"
        ],
        "summary": "List projects",
        "operationId": "listProjects",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "string",
            "description": "The name of project.",
            "name": "name",
            "in": "query"
          },
          {
            "type": "boolean",
            "format": "int32",
            "description": "The project is public or private.",
            "name": "public",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The name of project owner.",
            "name": "owner",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Bool value indicating whether return detailed information of the project",
            "name": "with_detail",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Return all matched projects.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of projects"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "This endpoint is for user to create a new project.",
        "tags": [
          "project"
        ],
        "summary": "Create a new project.",
        "operationId": "createProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/resourceNameInLocation"
          },
          {
            "description": "New created project.",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectReq"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "head": {
        "description": "This endpoint is used to check if the project name provided already exist.",
        "tags": [
          "project"
        ],
        "summary": "Check if the project name user provided already exists.",
        "operationId": "headProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "string",
            "description": "Project name for checking exists.",
            "name": "project_name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}": {
      "get": {
        "description": "This endpoint returns specific project information by project ID.",
        "tags": [
          "project"
        ],
        "summary": "Return specific project detail information",
        "operationId": "getProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          }
        ],
        "responses": {
          "200": {
            "description": "Return matched project information.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "This endpoint is aimed to update the properties of a project.",
        "tags": [
          "project"
        ],
        "summary": "Update properties for a selected project.",
        "operationId": "updateProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "description": "Updates of project.",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "This endpoint is aimed to delete project by project ID.",
        "tags": [
          "project"
        ],
        "summary": "Delete project by projectID",
        "operationId": "deleteProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/_deletable": {
      "get": {
        "description": "Get the deletable status of the project",
        "tags": [
          "project"
        ],
        "summary": "Get the deletable status of the project",
        "operationId": "getProjectDeletable",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          }
        ],
        "responses": {
          "200": {
            "description": "Return deletable status of the project.",
            "schema": {
              "$ref": "#/definitions/ProjectDeletable"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/robots": {
      "get": {
        "description": "Get all robot accounts of specified project",
        "tags": [
          "robotv1"
        ],
        "summary": "Get all robot accounts of specified project",
        "operationId": "ListRobotV1",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Robot"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of robot accounts"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create a robot account",
        "tags": [
          "robotv1"
        ],
        "summary": "Create a robot account",
        "operationId": "CreateRobotV1",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotCreateV1"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RobotCreated"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/robots/{robot_id}": {
      "get": {
        "description": "This endpoint returns specific robot account information by robot ID.",
        "tags": [
          "robotv1"
        ],
        "summary": "Get a robot account",
        "operationId": "GetRobotByIDV1",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/robotId"
          }
        ],
        "responses": {
          "200": {
            "description": "Return matched robot information.",
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Used to disable/enable a specified robot account.",
        "tags": [
          "robotv1"
        ],
        "summary": "Update status of robot account.",
        "operationId": "UpdateRobotV1",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/robotId"
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes specific robot account information by robot ID.",
        "tags": [
          "robotv1"
        ],
        "summary": "Delete a robot account",
        "operationId": "DeleteRobotV1",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/robotId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/summary": {
      "get": {
        "description": "Get summary of the project.",
        "tags": [
          "project"
        ],
        "summary": "Get summary of the project.",
        "operationId": "getProjectSummary",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get summary of the project successfully.",
            "schema": {
              "$ref": "#/definitions/ProjectSummary"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/logs": {
      "get": {
        "description": "Get recent logs of the projects",
        "tags": [
          "project"
        ],
        "summary": "Get recent logs of the projects",
        "operationId": "getLogs",
        "parameters": [
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditLog"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of auditlogs"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies": {
      "get": {
        "description": "List preheat policies",
        "tags": [
          "preheat"
        ],
        "summary": "List preheat policies",
        "operationId": "ListPolicies",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/query"
          }
        ],
        "responses": {
          "200": {
            "description": "List preheat policies success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PreheatPolicy"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of policies"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create a preheat policy under a project",
        "tags": [
          "preheat"
        ],
        "summary": "Create a preheat policy under a project",
        "operationId": "CreatePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "description": "The policy schema info",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}": {
      "get": {
        "description": "Get a preheat policy",
        "tags": [
          "preheat"
        ],
        "summary": "Get a preheat policy",
        "operationId": "GetPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a preheat policy success",
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update preheat policy",
        "tags": [
          "preheat"
        ],
        "summary": "Update preheat policy",
        "operationId": "UpdatePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          },
          {
            "description": "The policy schema info",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Manual preheat",
        "tags": [
          "preheat"
        ],
        "summary": "Manual preheat",
        "operationId": "ManualPreheat",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          },
          {
            "description": "The policy schema info",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete a preheat policy",
        "tags": [
          "preheat"
        ],
        "summary": "Delete a preheat policy",
        "operationId": "DeletePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions": {
      "get": {
        "description": "List executions for the given policy",
        "tags": [
          "preheat"
        ],
        "summary": "List executions for the given policy",
        "operationId": "ListExecutions",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/query"
          }
        ],
        "responses": {
          "200": {
            "description": "List executions success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Execution"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of executions"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}": {
      "get": {
        "description": "Get a execution detail by id",
        "tags": [
          "preheat"
        ],
        "summary": "Get a execution detail by id",
        "operationId": "GetExecution",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          },
          {
            "$ref": "#/parameters/executionId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get execution success",
            "schema": {
              "$ref": "#/definitions/Execution"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "patch": {
        "description": "Stop a execution",
        "tags": [
          "preheat"
        ],
        "summary": "Stop a execution",
        "operationId": "StopExecution",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "description": "The data of execution",
            "name": "execution",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Execution"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks": {
      "get": {
        "description": "List all the related tasks for the given execution",
        "tags": [
          "preheat"
        ],
        "summary": "List all the related tasks for the given execution",
        "operationId": "ListTasks",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/query"
          }
        ],
        "responses": {
          "200": {
            "description": "List tasks success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of tasks"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs": {
      "get": {
        "description": "Get the log text stream of the specified task for the given execution",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "preheat"
        ],
        "summary": "Get the log text stream of the specified task for the given execution",
        "operationId": "GetPreheatLog",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/taskId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get log success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of response"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/preheat/providers": {
      "get": {
        "description": "Get all providers at project level",
        "tags": [
          "preheat"
        ],
        "summary": "Get all providers at project level",
        "operationId": "ListProvidersUnderProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProviderUnderProject"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories": {
      "get": {
        "description": "List repositories of the specified project",
        "tags": [
          "repository"
        ],
        "summary": "List repositories",
        "operationId": "listRepositories",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Repository"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of repositories"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}": {
      "get": {
        "description": "Get the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Get repository",
        "operationId": "getRepository",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Update repository",
        "operationId": "updateRepository",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "description": "The JSON object of repository.",
            "name": "repository",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Delete repository",
        "operationId": "deleteRepository",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts": {
      "get": {
        "description": "List artifacts under the specific project and repository. Except the basic properties, the other supported queries in \"q\" includes \"tags=*\" to list only tagged artifacts, \"tags=nil\" to list only untagged artifacts, \"tags=~v\" to list artifacts whose tag fuzzy matches \"v\", \"tags=v\" to list artifact whose tag exactly matches \"v\", \"labels=(id1, id2)\" to list artifacts that both labels with id1 and id2 are added to",
        "tags": [
          "artifact"
        ],
        "summary": "List artifacts",
        "operationId": "listArtifacts",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/acceptVulnerabilities"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Specify whether the tags are included inside the returning artifacts",
            "name": "with_tag",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the labels are included inside the returning artifacts",
            "name": "with_label",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the scan overview is included inside the returning artifacts",
            "name": "with_scan_overview",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Artifact"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of artifacts"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Copy the artifact specified in the \"from\" parameter to the repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Copy artifact",
        "operationId": "CopyArtifact",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "type": "string",
            "description": "The artifact from which the new artifact is copied from, the format should be \"project/repository:tag\" or \"project/repository@digest\".",
            "name": "from",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}": {
      "get": {
        "description": "Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the specific artifact",
        "operationId": "getArtifact",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/acceptVulnerabilities"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Specify whether the tags are inclued inside the returning artifacts",
            "name": "with_tag",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the labels are inclued inside the returning artifacts",
            "name": "with_label",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the scan overview is inclued inside the returning artifacts",
            "name": "with_scan_overview",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is inclued inside the returning artifacts",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Artifact"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag",
        "tags": [
          "artifact"
        ],
        "summary": "Delete the specific artifact",
        "operationId": "deleteArtifact",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities": {
      "get": {
        "description": "Get the vulnerabilities addition of the artifact specified by the reference under the project and repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the vulnerabilities addition of the specific artifact",
        "operationId": "getVulnerabilitiesAddition",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "$ref": "#/parameters/acceptVulnerabilities"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the vulnerabilities addition"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}": {
      "get": {
        "description": "Get the addition of the artifact specified by the reference under the project and repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the addition of the specific artifact",
        "operationId": "getAddition",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "enum": [
              "build_history",
              "values.yaml",
              "readme.md",
              "dependencies"
            ],
            "type": "string",
            "description": "The type of addition.",
            "name": "addition",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the addition"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels": {
      "post": {
        "description": "Add label to the specified artiact.",
        "tags": [
          "artifact"
        ],
        "summary": "Add label to artifact",
        "operationId": "addLabel",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "description": "The label that added to the artifact. Only the ID property is needed.",
            "name": "label",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}": {
      "delete": {
        "description": "Remove the label from the specified artiact.",
        "tags": [
          "artifact"
        ],
        "summary": "Remove label from artifact",
        "operationId": "removeLabel",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the label that removed from the artifact.",
            "name": "label_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan": {
      "post": {
        "description": "Scan the specified artifact",
        "tags": [
          "scan"
        ],
        "summary": "Scan the artifact",
        "operationId": "scanArtifact",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/202"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log": {
      "get": {
        "description": "Get the log of the scan report",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "scan"
        ],
        "summary": "Get the log of the scan report",
        "operationId": "getReportLog",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "type": "string",
            "description": "The report id to get the log",
            "name": "report_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully get scan log file",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags": {
      "get": {
        "description": "List tags of the specific artifact",
        "tags": [
          "artifact"
        ],
        "summary": "List tags",
        "operationId": "listTags",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is included inside the returning tags",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is included inside the returning tags",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of tags"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create a tag for the specified artifact",
        "tags": [
          "artifact"
        ],
        "summary": "Create tag",
        "operationId": "createTag",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "description": "The JSON object of tag.",
            "name": "tag",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}": {
      "delete": {
        "description": "Delete the tag of the specified artifact",
        "tags": [
          "artifact"
        ],
        "summary": "Delete tag",
        "operationId": "deleteTag",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "$ref": "#/parameters/tagName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/replication/executions": {
      "get": {
        "description": "List replication executions",
        "tags": [
          "replication"
        ],
        "summary": "List replication executions",
        "operationId": "listReplicationExecutions",
        "parameters": [
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "integer",
            "description": "The ID of the policy that the executions belong to.",
            "name": "policy_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The execution status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The trigger mode.",
            "name": "trigger",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReplicationExecution"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of the resources"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Start one replication execution according to the policy",
        "tags": [
          "replication"
        ],
        "summary": "Start one replication execution",
        "operationId": "startReplication",
        "parameters": [
          {
            "description": "The ID of policy that the execution belongs to",
            "name": "execution",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartReplicationExecution"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/replication/executions/{id}": {
      "get": {
        "description": "Get the replication execution specified by ID",
        "tags": [
          "replication"
        ],
        "summary": "Get the specific replication execution",
        "operationId": "getReplicationExecution",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReplicationExecution"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Stop the replication execution specified by ID",
        "tags": [
          "replication"
        ],
        "summary": "Stop the specific replication execution",
        "operationId": "stopReplication",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/replication/executions/{id}/tasks": {
      "get": {
        "description": "List replication tasks for a specific execution",
        "tags": [
          "replication"
        ],
        "summary": "List replication tasks for a specific execution",
        "operationId": "listReplicationTasks",
        "parameters": [
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution that the tasks belongs to.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The task status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The resource type.",
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReplicationTask"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of the resources"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/replication/executions/{id}/tasks/{task_id}/log": {
      "get": {
        "description": "Get the log of the specific replication task",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "replication"
        ],
        "summary": "Get the log of the specific replication task",
        "operationId": "getReplicationLog",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution that the tasks belongs to.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the task.",
            "name": "task_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of response body"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/retentions": {
      "post": {
        "description": "Create Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when no retention policy binded to project yet.",
        "tags": [
          "Retention"
        ],
        "summary": "Create Retention Policy",
        "operationId": "createRetention",
        "parameters": [
          {
            "description": "Create Retention Policy successfully.",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/retentions/metadatas": {
      "get": {
        "description": "Get Retention Metadatas.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention Metadatas",
        "operationId": "getRentenitionMetadata",
        "responses": {
          "200": {
            "description": "Get Retention Metadatas successfully.",
            "schema": {
              "$ref": "#/definitions/RetentionMetadata"
            }
          }
        }
      }
    },
    "/retentions/{id}": {
      "get": {
        "description": "Get Retention Policy.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention Policy",
        "operationId": "getRetention",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get Retention Policy successfully.",
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.",
        "tags": [
          "Retention"
        ],
        "summary": "Update Retention Policy",
        "operationId": "updateRetention",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update Retention Policy successfully."
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/retentions/{id}/executions": {
      "get": {
        "description": "Get Retention executions, execution status may be delayed before job service schedule it up.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention executions",
        "operationId": "listRetentionExecutions",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The size of per page.",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a Retention execution successfully.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/RetentionExecution"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Trigger a Retention Execution, if dry_run is True, nothing would be deleted actually.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Retention"
        ],
        "summary": "Trigger a Retention Execution",
        "operationId": "triggerRetentionExecution",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dry_run": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trigger a Retention job successfully."
          },
          "201": {
            "$ref": "#/responses/201"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/retentions/{id}/executions/{eid}": {
      "patch": {
        "description": "Stop a Retention execution, only support \"stop\" action now.",
        "tags": [
          "Retention"
        ],
        "summary": "Stop a Retention execution",
        "operationId": "operateRetentionExecution",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "eid",
            "in": "path",
            "required": true
          },
          {
            "description": "The action, only support \"stop\" now.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stop a Retention job successfully."
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/retentions/{id}/executions/{eid}/tasks": {
      "get": {
        "description": "Get Retention tasks, each repository as a task.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention tasks",
        "operationId": "listRetentionTasks",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "eid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The size of per page.",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Retention job tasks successfully.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/RetentionExecutionTask"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/retentions/{id}/executions/{eid}/tasks/{tid}": {
      "get": {
        "description": "Get Retention job task log, tags ratain or deletion detail will be shown in a table.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention job task log",
        "operationId": "getRetentionTaskLog",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "eid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "tid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get Retention job task log successfully.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/robots": {
      "get": {
        "description": "List the robot accounts with the specified level and project.",
        "tags": [
          "robot"
        ],
        "summary": "Get robot account",
        "operationId": "ListRobot",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Robot"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of robot accounts"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create a robot account",
        "tags": [
          "robot"
        ],
        "summary": "Create a robot account",
        "operationId": "CreateRobot",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RobotCreated"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/robots/{robot_id}": {
      "get": {
        "description": "This endpoint returns specific robot account information by robot ID.",
        "tags": [
          "robot"
        ],
        "summary": "Get a robot account",
        "operationId": "GetRobotByID",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/robotId"
          }
        ],
        "responses": {
          "200": {
            "description": "Return matched robot information.",
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "This endpoint updates specific robot account information by robot ID.",
        "tags": [
          "robot"
        ],
        "summary": "Update a robot account",
        "operationId": "UpdateRobot",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/robotId"
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes specific robot account information by robot ID.",
        "tags": [
          "robot"
        ],
        "summary": "Delete a robot account",
        "operationId": "DeleteRobot",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/robotId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "patch": {
        "description": "Refresh the robot secret",
        "tags": [
          "robot"
        ],
        "summary": "Refresh the robot secret",
        "operationId": "RefreshSec",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/robotId"
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robotSec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotSec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return refreshed robot sec.",
            "schema": {
              "$ref": "#/definitions/RobotSec"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/scans/all/metrics": {
      "get": {
        "description": "Get the metrics of the latest scan all process",
        "tags": [
          "scanAll"
        ],
        "summary": "Get the metrics of the latest scan all process",
        "operationId": "getLatestScanAllMetrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/scans/schedule/metrics": {
      "get": {
        "description": "Get the metrics of the latest scheduled scan all process",
        "tags": [
          "scanAll"
        ],
        "summary": "Get the metrics of the latest scheduled scan all process",
        "operationId": "getLatestScheduledScanAllMetrics",
        "deprecated": true,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/system/gc": {
      "get": {
        "description": "This endpoint let user get gc execution history.",
        "tags": [
          "gc"
        ],
        "summary": "Get gc results.",
        "operationId": "getGCHistory",
        "parameters": [
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Get gc results successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GCHistory"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of history"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/system/gc/schedule": {
      "get": {
        "description": "This endpoint is for get schedule of gc job.",
        "tags": [
          "gc"
        ],
        "summary": "Get gc's schedule.",
        "operationId": "getGCSchedule",
        "responses": {
          "200": {
            "description": "Get gc's schedule.",
            "schema": {
              "$ref": "#/definitions/GCHistory"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "This endpoint is for update gc schedule.\n",
        "tags": [
          "gc"
        ],
        "summary": "Update gc's schedule.",
        "operationId": "updateGCSchedule",
        "parameters": [
          {
            "description": "Updates of gc's schedule.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated gc's schedule successfully."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "This endpoint is for update gc schedule.\n",
        "tags": [
          "gc"
        ],
        "summary": "Create a gc schedule.",
        "operationId": "createGCSchedule",
        "parameters": [
          {
            "description": "Updates of gc's schedule.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/system/gc/{gc_id}": {
      "get": {
        "description": "This endpoint let user get gc status filtered by specific ID.",
        "tags": [
          "gc"
        ],
        "summary": "Get gc status.",
        "operationId": "getGC",
        "parameters": [
          {
            "$ref": "#/parameters/gcId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get gc results successfully.",
            "schema": {
              "$ref": "#/definitions/GCHistory"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/system/gc/{gc_id}/log": {
      "get": {
        "description": "This endpoint let user get gc job logs filtered by specific ID.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "gc"
        ],
        "summary": "Get gc job log.",
        "operationId": "getGCLog",
        "parameters": [
          {
            "$ref": "#/parameters/gcId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get successfully.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/system/scanAll/schedule": {
      "get": {
        "description": "This endpoint is for getting a schedule for the scan all job, which scans all of images in Harbor.",
        "tags": [
          "scanAll"
        ],
        "summary": "Get scan all's schedule.",
        "operationId": "getScanAllSchedule",
        "responses": {
          "200": {
            "description": "Get a schedule for the scan all job, which scans all of images in Harbor.",
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "This endpoint is for updating the schedule of scan all job, which scans all of images in Harbor.",
        "tags": [
          "scanAll"
        ],
        "summary": "Update scan all's schedule.",
        "operationId": "updateScanAllSchedule",
        "parameters": [
          {
            "description": "Updates the schedule of scan all job, which scans all of images in Harbor.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "This endpoint is for creating a schedule or a manual trigger for the scan all job, which scans all of images in Harbor.",
        "tags": [
          "scanAll"
        ],
        "summary": "Create a schedule or a manual trigger for the scan all job.",
        "operationId": "createScanAllSchedule",
        "parameters": [
          {
            "description": "Create a schedule or a manual trigger for the scan all job.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/systeminfo": {
      "get": {
        "description": "This API is for retrieving general system info, this can be called by anonymous request.  Some attributes will be omitted in the response when this API is called by anonymous request.\n",
        "tags": [
          "systeminfo"
        ],
        "summary": "Get general system info",
        "responses": {
          "200": {
            "description": "Get general info successfully.",
            "schema": {
              "$ref": "#/definitions/GeneralInfo"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/systeminfo/getcert": {
      "get": {
        "description": "This endpoint is for downloading a default root certificate.\n",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "systeminfo"
        ],
        "summary": "Get default root certificate.",
        "responses": {
          "200": {
            "description": "Get default root certificate successfully.",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "To set the filename of the downloaded file."
              }
            }
          },
          "404": {
            "description": "Not found the default root certificate."
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/systeminfo/volumes": {
      "get": {
        "description": "This endpoint is for retrieving system volume info that only provides for admin user.  Note that the response only reflects the storage status of local disk.\n",
        "tags": [
          "systeminfo"
        ],
        "summary": "Get system volume info (total/free size).",
        "responses": {
          "200": {
            "description": "Get system volumes successfully.",
            "schema": {
              "$ref": "#/definitions/SystemInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    }
  },
  "definitions": {
    "Access": {
      "type": "object",
      "properties": {
        "action": {
          "description": "The action of the access",
          "type": "string"
        },
        "effect": {
          "description": "The effect of the access",
          "type": "string"
        },
        "resource": {
          "description": "The resource of the access",
          "type": "string"
        }
      }
    },
    "AdditionLink": {
      "type": "object",
      "properties": {
        "absolute": {
          "description": "Determine whether the link is an absolute URL or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "href": {
          "description": "The link of the addition",
          "type": "string"
        }
      }
    },
    "AdditionLinks": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AdditionLink"
      }
    },
    "Annotations": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "Artifact": {
      "type": "object",
      "properties": {
        "addition_links": {
          "$ref": "#/definitions/AdditionLinks"
        },
        "annotations": {
          "$ref": "#/definitions/Annotations"
        },
        "digest": {
          "description": "The digest of the artifact",
          "type": "string"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "icon": {
          "description": "The digest of the icon",
          "type": "string"
        },
        "id": {
          "description": "The ID of the artifact",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "manifest_media_type": {
          "description": "The manifest media type of the artifact",
          "type": "string"
        },
        "media_type": {
          "description": "The media type of the artifact",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of the project that the artifact belongs to",
          "type": "integer",
          "format": "int64"
        },
        "pull_time": {
          "description": "The latest pull time of the artifact",
          "type": "string",
          "format": "date-time"
        },
        "push_time": {
          "description": "The push time of the artifact",
          "type": "string",
          "format": "date-time"
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "repository_id": {
          "description": "The ID of the repository that the artifact belongs to",
          "type": "integer",
          "format": "int64"
        },
        "scan_overview": {
          "description": "The overview of the scan result.",
          "$ref": "#/definitions/ScanOverview"
        },
        "size": {
          "description": "The size of the artifact",
          "type": "integer",
          "format": "int64"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "type": {
          "description": "The type of the artifact, e.g. image, chart, etc",
          "type": "string"
        }
      }
    },
    "AuditLog": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the audit log entry.",
          "type": "integer"
        },
        "op_time": {
          "description": "The time when this operation is triggered.",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T15:04:05"
        },
        "operation": {
          "description": "The operation against the repository in this log entry.",
          "type": "string"
        },
        "resource": {
          "description": "Name of the repository in this log entry.",
          "type": "string"
        },
        "resource_type": {
          "description": "Tag of the repository in this log entry.",
          "type": "string"
        },
        "username": {
          "description": "Username of the user in this log entry.",
          "type": "string"
        }
      }
    },
    "AuthproxySetting": {
      "type": "object",
      "properties": {
        "endpoint": {
          "description": "The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'",
          "type": "string"
        },
        "server_certificate": {
          "description": "The certificate to be pinned when connecting auth proxy.",
          "type": "string"
        },
        "skip_search": {
          "description": "The flag to determine whether Harbor can skip search the user/group when adding him as a member.",
          "type": "boolean"
        },
        "tokenreivew_endpoint": {
          "description": "The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'",
          "type": "string"
        },
        "verify_cert": {
          "description": "The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.",
          "type": "boolean"
        }
      }
    },
    "CVEAllowlist": {
      "description": "The CVE Allowlist for system or project",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the allowlist.",
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "description": "the time for expiration of the allowlist, in the form of seconds since epoch.  This is an optional attribute, if it's not set the CVE allowlist does not expire.",
          "type": "integer",
          "x-nullable": true
        },
        "id": {
          "description": "ID of the allowlist",
          "type": "integer"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CVEAllowlistItem"
          }
        },
        "project_id": {
          "description": "ID of the project which the allowlist belongs to.  For system level allowlist this attribute is zero.",
          "type": "integer"
        },
        "update_time": {
          "description": "The update time of the allowlist.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CVEAllowlistItem": {
      "description": "The item in CVE allowlist",
      "type": "object",
      "properties": {
        "cve_id": {
          "description": "The ID of the CVE, such as \"CVE-2019-10164\"",
          "type": "string"
        }
      }
    },
    "Error": {
      "description": "a model for all the error response coming from harbor",
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code",
          "type": "string"
        },
        "message": {
          "description": "The error message",
          "type": "string"
        }
      }
    },
    "Errors": {
      "description": "The error array that describe the errors got during the handling of request",
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "Execution": {
      "type": "object",
      "properties": {
        "end_time": {
          "description": "The end time of execution",
          "type": "string"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "id": {
          "description": "The ID of execution",
          "type": "integer"
        },
        "metrics": {
          "$ref": "#/definitions/Metrics"
        },
        "start_time": {
          "description": "The start time of execution",
          "type": "string"
        },
        "status": {
          "description": "The status of execution",
          "type": "string"
        },
        "status_message": {
          "description": "The status message of execution",
          "type": "string"
        },
        "trigger": {
          "description": "The trigger of execution",
          "type": "string"
        },
        "vendor_id": {
          "description": "The vendor id of execution",
          "type": "integer"
        },
        "vendor_type": {
          "description": "The vendor type of execution",
          "type": "string"
        }
      }
    },
    "ExtraAttrs": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "GCHistory": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "the creation time of gc job.",
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "description": "if gc job was deleted.",
          "type": "boolean"
        },
        "id": {
          "description": "the id of gc job.",
          "type": "integer"
        },
        "job_kind": {
          "description": "the job kind of gc job.",
          "type": "string"
        },
        "job_name": {
          "description": "the job name of gc job.",
          "type": "string"
        },
        "job_parameters": {
          "description": "the job parameters of gc job.",
          "type": "string"
        },
        "job_status": {
          "description": "the status of gc job.",
          "type": "string"
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleObj"
        },
        "update_time": {
          "description": "the update time of gc job.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "GeneralInfo": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "description": "The auth mode of current Harbor instance.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "authproxy_settings": {
          "description": "The setting of auth proxy this is only available when Harbor relies on authproxy for authentication.",
          "x-nullable": true,
          "x-omitempty": true,
          "$ref": "#/definitions/AuthproxySetting"
        },
        "external_url": {
          "description": "The external URL of Harbor, with protocol.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "harbor_version": {
          "description": "The build version of Harbor.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "has_ca_root": {
          "description": "Indicate whether there is a ca root cert file ready for download in the file system.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "notification_enable": {
          "description": "The flag to indicate whether notification mechanism is enabled on Harbor instance.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "project_creation_restriction": {
          "description": "Indicate who can create projects, it could be 'adminonly' or 'everyone'.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "read_only": {
          "description": "The flag to indicate whether Harbor is in readonly mode.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "registry_storage_provider_name": {
          "description": "The storage provider's name of Harbor registry",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "registry_url": {
          "description": "The url of registry against which the docker command should be issued.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "self_registration": {
          "description": "Indicate whether the Harbor instance enable user to register himself.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "with_chartmuseum": {
          "description": "If the Harbor instance is deployed with nested chartmuseum.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "with_notary": {
          "description": "If the Harbor instance is deployed with nested notary.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        }
      }
    },
    "Icon": {
      "type": "object",
      "properties": {
        "content": {
          "description": "The base64 encoded content of the icon",
          "type": "string"
        },
        "content-type": {
          "description": "The content type of the icon",
          "type": "string"
        }
      }
    },
    "Instance": {
      "type": "object",
      "properties": {
        "auth_info": {
          "description": "The auth credential data if exists",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "auth_mode": {
          "description": "The authentication way supported",
          "type": "string"
        },
        "default": {
          "description": "Whether the instance is default or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "description": {
          "description": "Description of instance",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the instance is activated or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "endpoint": {
          "description": "The service endpoint of this instance",
          "type": "string"
        },
        "id": {
          "description": "Unique ID",
          "type": "integer"
        },
        "insecure": {
          "description": "Whether the instance endpoint is insecure or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "Instance name",
          "type": "string"
        },
        "setup_timestamp": {
          "description": "The timestamp of instance setting up",
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "description": "The health status",
          "type": "string"
        },
        "vendor": {
          "description": "Based on which driver, identified by ID",
          "type": "string"
        }
      }
    },
    "Label": {
      "type": "object",
      "properties": {
        "color": {
          "description": "The color the label",
          "type": "string"
        },
        "creation_time": {
          "description": "The creation time the label",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description the label",
          "type": "string"
        },
        "id": {
          "description": "The ID of the label",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name the label",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of project that the label belongs to",
          "type": "integer",
          "format": "int64"
        },
        "scope": {
          "description": "The scope the label",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the label",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "icon": {
          "description": "icon",
          "type": "string"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "maintainers": {
          "description": "maintainers",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "source": {
          "description": "source",
          "type": "string"
        },
        "version": {
          "description": "version",
          "type": "string"
        }
      }
    },
    "Metrics": {
      "type": "object",
      "properties": {
        "error_task_count": {
          "description": "The count of error task",
          "type": "integer"
        },
        "pending_task_count": {
          "description": "The count of pending task",
          "type": "integer"
        },
        "running_task_count": {
          "description": "The count of running task",
          "type": "integer"
        },
        "scheduled_task_count": {
          "description": "The count of scheduled task",
          "type": "integer"
        },
        "stopped_task_count": {
          "description": "The count of stopped task",
          "type": "integer"
        },
        "success_task_count": {
          "description": "The count of success task",
          "type": "integer"
        },
        "task_count": {
          "description": "The count of task",
          "type": "integer"
        }
      }
    },
    "NativeReportSummary": {
      "description": "The summary for the native report",
      "type": "object",
      "properties": {
        "complete_percent": {
          "description": "The complete percent of the scanning which value is between 0 and 100",
          "type": "integer",
          "example": 100
        },
        "duration": {
          "description": "The seconds spent for generating the report",
          "type": "integer",
          "format": "int64",
          "example": 300
        },
        "end_time": {
          "description": "The end time of the scan process that generating report",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T15:04:05"
        },
        "report_id": {
          "description": "id of the native scan report",
          "type": "string",
          "example": "5f62c830-f996-11e9-957f-0242c0a89008"
        },
        "scan_status": {
          "description": "The status of the report generating process",
          "type": "string",
          "example": "Success"
        },
        "scanner": {
          "$ref": "#/definitions/Scanner"
        },
        "severity": {
          "description": "The overall severity",
          "type": "string",
          "example": "High"
        },
        "start_time": {
          "description": "The start time of the scan process that generating report",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T14:04:05"
        },
        "summary": {
          "$ref": "#/definitions/VulnerabilitySummary"
        }
      }
    },
    "Platform": {
      "type": "object",
      "properties": {
        "'os.features'": {
          "description": "The features of the OS that the artifact applys to",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "'os.version'": {
          "description": "The version of the OS that the artifact applys to",
          "type": "string"
        },
        "architecture": {
          "description": "The architecture that the artifact applys to",
          "type": "string"
        },
        "os": {
          "description": "The OS that the artifact applys to",
          "type": "string"
        },
        "variant": {
          "description": "The variant of the CPU",
          "type": "string"
        }
      }
    },
    "PreheatPolicy": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The Create Time of preheat policy",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The Description of preheat policy",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the preheat policy enabled",
          "type": "boolean",
          "x-omitempty": false
        },
        "filters": {
          "description": "The Filters of preheat policy",
          "type": "string"
        },
        "id": {
          "description": "The ID of preheat policy",
          "type": "integer"
        },
        "name": {
          "description": "The Name of preheat policy",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of preheat policy project",
          "type": "integer"
        },
        "provider_id": {
          "description": "The ID of preheat policy provider",
          "type": "integer"
        },
        "provider_name": {
          "description": "The Name of preheat policy provider",
          "type": "string"
        },
        "trigger": {
          "description": "The Trigger of preheat policy",
          "type": "string"
        },
        "update_time": {
          "description": "The Update Time of preheat policy",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "chart_count": {
          "description": "The total number of charts under this project.",
          "type": "integer"
        },
        "creation_time": {
          "description": "The creation time of the project.",
          "type": "string",
          "format": "date-time"
        },
        "current_user_role_id": {
          "description": "The role ID with highest permission of the current user who triggered the API (for UI).  This attribute is deprecated and will be removed in future versions.",
          "type": "integer"
        },
        "current_user_role_ids": {
          "description": "The list of role ID of the current user who triggered the API (for UI)",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "cve_allowlist": {
          "description": "The CVE allowlist of this project.",
          "$ref": "#/definitions/CVEAllowlist"
        },
        "deleted": {
          "description": "A deletion mark of the project.",
          "type": "boolean"
        },
        "metadata": {
          "description": "The metadata of the project.",
          "$ref": "#/definitions/ProjectMetadata"
        },
        "name": {
          "description": "The name of the project.",
          "type": "string"
        },
        "owner_id": {
          "description": "The owner ID of the project always means the creator of the project.",
          "type": "integer",
          "format": "int32"
        },
        "owner_name": {
          "description": "The owner name of the project.",
          "type": "string"
        },
        "project_id": {
          "description": "Project ID",
          "type": "integer",
          "format": "int32"
        },
        "registry_id": {
          "description": "The ID of referenced registry when the project is a proxy cache project.",
          "type": "integer",
          "format": "int64"
        },
        "repo_count": {
          "description": "The number of the repositories under this project.",
          "type": "integer"
        },
        "togglable": {
          "description": "Correspond to the UI about whether the project's publicity is  updatable (for UI)",
          "type": "boolean"
        },
        "update_time": {
          "description": "The update time of the project.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ProjectDeletable": {
      "type": "object",
      "properties": {
        "deletable": {
          "description": "Whether the project can be deleted.",
          "type": "boolean"
        },
        "message": {
          "description": "The detail message when the project can not be deleted.",
          "type": "string"
        }
      }
    },
    "ProjectMetadata": {
      "type": "object",
      "properties": {
        "auto_scan": {
          "description": "Whether scan images automatically when pushing. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-nullable": true
        },
        "enable_content_trust": {
          "description": "Whether content trust is enabled or not. If it is enabled, user can't pull unsigned images from this project. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-nullable": true
        },
        "prevent_vul": {
          "description": "Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-nullable": true
        },
        "public": {
          "description": "The public status of the project. The valid values are \"true\", \"false\".",
          "type": "string"
        },
        "retention_id": {
          "description": "The ID of the tag retention policy for the project",
          "type": "string",
          "x-nullable": true
        },
        "reuse_sys_cve_allowlist": {
          "description": "Whether this project reuse the system level CVE allowlist as the allowlist of its own.  The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.",
          "type": "string",
          "x-nullable": true
        },
        "severity": {
          "description": "If the vulnerability is high than severity defined here, the images can't be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "ProjectReq": {
      "type": "object",
      "properties": {
        "cve_allowlist": {
          "description": "The CVE allowlist of the project.",
          "$ref": "#/definitions/CVEAllowlist"
        },
        "metadata": {
          "description": "The metadata of the project.",
          "$ref": "#/definitions/ProjectMetadata"
        },
        "project_name": {
          "description": "The name of the project.",
          "type": "string"
        },
        "public": {
          "description": "deprecated, reserved for project creation in replication",
          "type": "boolean",
          "x-nullable": true
        },
        "registry_id": {
          "description": "The ID of referenced registry when creating the proxy cache project",
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        },
        "storage_limit": {
          "description": "The storage quota of the project.",
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        }
      }
    },
    "ProjectSummary": {
      "type": "object",
      "properties": {
        "chart_count": {
          "description": "The total number of charts under this project.",
          "type": "integer"
        },
        "developer_count": {
          "description": "The total number of developer members.",
          "type": "integer"
        },
        "guest_count": {
          "description": "The total number of guest members.",
          "type": "integer"
        },
        "limited_guest_count": {
          "description": "The total number of limited guest members.",
          "type": "integer"
        },
        "maintainer_count": {
          "description": "The total number of maintainer members.",
          "type": "integer"
        },
        "project_admin_count": {
          "description": "The total number of project admin members.",
          "type": "integer"
        },
        "quota": {
          "type": "object",
          "properties": {
            "hard": {
              "description": "The hard limits of the quota",
              "$ref": "#/definitions/ResourceList"
            },
            "used": {
              "description": "The used status of the quota",
              "$ref": "#/definitions/ResourceList"
            }
          }
        },
        "registry": {
          "$ref": "#/definitions/Registry"
        },
        "repo_count": {
          "description": "The number of the repositories under this project.",
          "type": "integer"
        }
      }
    },
    "ProviderUnderProject": {
      "type": "object",
      "properties": {
        "default": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "provider": {
          "type": "string"
        }
      }
    },
    "Reference": {
      "type": "object",
      "properties": {
        "annotations": {
          "$ref": "#/definitions/Annotations"
        },
        "child_digest": {
          "description": "The digest of the child artifact",
          "type": "string"
        },
        "child_id": {
          "description": "The child ID of the reference",
          "type": "integer",
          "format": "int64"
        },
        "parent_id": {
          "description": "The parent ID of the reference",
          "type": "integer",
          "format": "int64"
        },
        "platform": {
          "$ref": "#/definitions/Platform"
        },
        "urls": {
          "description": "The download URLs",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Registry": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The create time of the policy.",
          "type": "string"
        },
        "credential": {
          "$ref": "#/definitions/RegistryCredential"
        },
        "description": {
          "description": "Description of the registry.",
          "type": "string"
        },
        "id": {
          "description": "The registry ID.",
          "type": "integer",
          "format": "int64"
        },
        "insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the server.",
          "type": "boolean"
        },
        "name": {
          "description": "The registry name.",
          "type": "string"
        },
        "status": {
          "description": "Health status of the registry.",
          "type": "string"
        },
        "type": {
          "description": "Type of the registry, e.g. 'harbor'.",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the policy.",
          "type": "string"
        },
        "url": {
          "description": "The registry URL string.",
          "type": "string"
        }
      }
    },
    "RegistryCredential": {
      "type": "object",
      "properties": {
        "access_key": {
          "description": "Access key, e.g. user name when credential type is 'basic'.",
          "type": "string"
        },
        "access_secret": {
          "description": "Access secret, e.g. password when credential type is 'basic'.",
          "type": "string"
        },
        "type": {
          "description": "Credential type, such as 'basic', 'oauth'.",
          "type": "string"
        }
      }
    },
    "ReplicationExecution": {
      "description": "The replication execution",
      "type": "object",
      "properties": {
        "end_time": {
          "description": "The end time",
          "type": "string",
          "format": "date-time"
        },
        "failed": {
          "description": "The count of failed executions",
          "type": "integer",
          "x-omitempty": false
        },
        "id": {
          "description": "The ID of the execution",
          "type": "integer"
        },
        "in_progress": {
          "description": "The count of in_progress executions",
          "type": "integer",
          "x-omitempty": false
        },
        "policy_id": {
          "description": "The ID if the policy that the execution belongs to",
          "type": "integer"
        },
        "start_time": {
          "description": "The start time",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The status of the execution",
          "type": "string"
        },
        "status_text": {
          "description": "The status text",
          "type": "string",
          "x-omitempty": false
        },
        "stopped": {
          "description": "The count of stopped executions",
          "type": "integer",
          "x-omitempty": false
        },
        "succeed": {
          "description": "The count of succeed executions",
          "type": "integer",
          "x-omitempty": false
        },
        "total": {
          "description": "The total count of all executions",
          "type": "integer",
          "x-omitempty": false
        },
        "trigger": {
          "description": "The trigger mode",
          "type": "string"
        }
      }
    },
    "ReplicationTask": {
      "description": "The replication task",
      "type": "object",
      "properties": {
        "dst_resource": {
          "description": "The destination resource that the task operates",
          "type": "string"
        },
        "end_time": {
          "description": "The end time of the task",
          "type": "string",
          "format": "date-time"
        },
        "execution_id": {
          "description": "The ID of the execution that the task belongs to",
          "type": "integer"
        },
        "id": {
          "description": "The ID of the task",
          "type": "integer"
        },
        "job_id": {
          "description": "The ID of the underlying job that the task related to",
          "type": "string"
        },
        "operation": {
          "description": "The operation of the task",
          "type": "string"
        },
        "resource_type": {
          "description": "The type of the resource that the task operates",
          "type": "string"
        },
        "src_resource": {
          "description": "The source resource that the task operates",
          "type": "string"
        },
        "start_time": {
          "description": "The start time of the task",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The status of the task",
          "type": "string"
        }
      }
    },
    "Repository": {
      "type": "object",
      "properties": {
        "artifact_count": {
          "description": "The count of the artifacts inside the repository",
          "type": "integer",
          "format": "int64"
        },
        "creation_time": {
          "description": "The creation time of the repository",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the repository",
          "type": "string"
        },
        "id": {
          "description": "The ID of the repository",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of the repository",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of the project that the repository belongs to",
          "type": "integer",
          "format": "int64"
        },
        "pull_count": {
          "description": "The count that the artifact inside the repository pulled",
          "type": "integer",
          "format": "int64"
        },
        "update_time": {
          "description": "The update time of the repository",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ResourceList": {
      "type": "object",
      "additionalProperties": {
        "type": "integer",
        "format": "int64"
      }
    },
    "RetentionExecution": {
      "type": "object",
      "properties": {
        "dry_run": {
          "type": "boolean"
        },
        "end_time": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "policy_id": {
          "type": "integer",
          "format": "int64"
        },
        "start_time": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "trigger": {
          "type": "string"
        }
      }
    },
    "RetentionExecutionTask": {
      "type": "object",
      "properties": {
        "end_time": {
          "type": "string"
        },
        "execution_id": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "job_id": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "retained": {
          "type": "integer",
          "x-omitempty": false
        },
        "start_time": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "status_code": {
          "type": "integer",
          "x-omitempty": false
        },
        "status_revision": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "RetentionMetadata": {
      "description": "the tag retention metadata",
      "type": "object",
      "properties": {
        "scope_selectors": {
          "description": "supported scope selectors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelectorMetadata"
          }
        },
        "tag_selectors": {
          "description": "supported tag selectors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelectorMetadata"
          }
        },
        "templates": {
          "description": "templates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRuleMetadata"
          }
        }
      }
    },
    "RetentionPolicy": {
      "description": "retention policy",
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRule"
          }
        },
        "scope": {
          "type": "object",
          "$ref": "#/definitions/RetentionPolicyScope"
        },
        "trigger": {
          "type": "object",
          "$ref": "#/definitions/RetentionRuleTrigger"
        }
      }
    },
    "RetentionPolicyScope": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string"
        },
        "ref": {
          "type": "integer"
        }
      }
    },
    "RetentionRule": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "priority": {
          "type": "integer"
        },
        "scope_selectors": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RetentionSelector"
            }
          }
        },
        "tag_selectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelector"
          }
        },
        "template": {
          "type": "string"
        }
      }
    },
    "RetentionRuleMetadata": {
      "description": "the tag retention rule metadata",
      "type": "object",
      "properties": {
        "action": {
          "description": "rule action",
          "type": "string"
        },
        "display_text": {
          "description": "rule display text",
          "type": "string"
        },
        "params": {
          "description": "rule params",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRuleParamMetadata"
          }
        },
        "rule_template": {
          "description": "rule id",
          "type": "string"
        }
      }
    },
    "RetentionRuleParamMetadata": {
      "description": "rule param",
      "type": "object",
      "properties": {
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "RetentionRuleTrigger": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "references": {
          "type": "object"
        },
        "settings": {
          "type": "object"
        }
      }
    },
    "RetentionSelector": {
      "type": "object",
      "properties": {
        "decoration": {
          "type": "string"
        },
        "extras": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        }
      }
    },
    "RetentionSelectorMetadata": {
      "description": "retention selector",
      "type": "object",
      "properties": {
        "decorations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "display_text": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "Robot": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the robot.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the robot",
          "type": "string"
        },
        "disable": {
          "description": "The disable status of the robot",
          "type": "boolean",
          "x-omitempty": false
        },
        "duration": {
          "description": "The duration of the robot in days",
          "type": "integer",
          "format": "int64"
        },
        "editable": {
          "description": "The editable status of the robot",
          "type": "boolean",
          "x-omitempty": false
        },
        "expires_at": {
          "description": "The expiration data of the robot",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "The ID of the robot",
          "type": "integer",
          "format": "int64"
        },
        "level": {
          "description": "The level of the robot, project or system",
          "type": "string"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotPermission"
          }
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the robot.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "RobotCreate": {
      "description": "The request for robot account creation.",
      "type": "object",
      "properties": {
        "description": {
          "description": "The description of the robot",
          "type": "string"
        },
        "disable": {
          "description": "The disable status of the robot",
          "type": "boolean"
        },
        "duration": {
          "description": "The duration of the robot in days",
          "type": "integer",
          "format": "int64"
        },
        "level": {
          "description": "The level of the robot, project or system",
          "type": "string"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotPermission"
          }
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        }
      }
    },
    "RobotCreateV1": {
      "type": "object",
      "properties": {
        "access": {
          "description": "The permission of robot account",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Access"
          }
        },
        "description": {
          "description": "The description of robot account",
          "type": "string"
        },
        "expires_at": {
          "description": "The expiration time on or after which the JWT MUST NOT be accepted for processing.",
          "type": "integer"
        },
        "name": {
          "description": "The name of robot account",
          "type": "string"
        }
      }
    },
    "RobotCreated": {
      "description": "The response for robot account creation.",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the robot.",
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "description": "The expiration data of the robot",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "The ID of the robot",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        }
      }
    },
    "RobotPermission": {
      "type": "object",
      "properties": {
        "access": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Access"
          }
        },
        "kind": {
          "description": "The kind of the permission",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the permission",
          "type": "string"
        }
      }
    },
    "RobotSec": {
      "description": "The response for refresh/update robot account secret.",
      "type": "object",
      "properties": {
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        }
      }
    },
    "ScanOverview": {
      "description": "The scan overview attached in the metadata of tag",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/NativeReportSummary"
      }
    },
    "Scanner": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the scanner",
          "type": "string",
          "example": "Trivy"
        },
        "vendor": {
          "description": "Name of the scanner provider",
          "type": "string",
          "example": "Aqua Security"
        },
        "version": {
          "description": "Version of the scanner adapter",
          "type": "string",
          "example": "v0.9.1"
        }
      }
    },
    "Schedule": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "the creation time of the schedule.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "description": "The id of the schedule.",
          "type": "integer",
          "readOnly": true
        },
        "parameters": {
          "description": "The parameters of schedule job",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleObj"
        },
        "status": {
          "description": "The status of the schedule.",
          "type": "string",
          "readOnly": true
        },
        "update_time": {
          "description": "the update time of the schedule.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ScheduleObj": {
      "type": "object",
      "properties": {
        "cron": {
          "description": "A cron expression, a time-based job scheduler.",
          "type": "string"
        },
        "type": {
          "description": "The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual' and 'None'.\n'Manual' means to trigger it right away and 'None' means to cancel the schedule.\n",
          "type": "string",
          "enum": [
            "Hourly",
            "Daily",
            "Weekly",
            "Custom",
            "Manual",
            "None"
          ]
        }
      }
    },
    "StartReplicationExecution": {
      "type": "object",
      "properties": {
        "policy_id": {
          "description": "The ID of policy that the execution belongs to.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Stats": {
      "description": "Stats provides the overall progress of the scan all process.",
      "type": "object",
      "properties": {
        "completed": {
          "description": "The number of the finished scan processes triggered by the scan all action",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 90
        },
        "metrics": {
          "description": "The metrics data for the each status",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int",
            "example": 10
          },
          "example": {
            "Error": 2,
            "Running": 3,
            "Success": 5
          }
        },
        "ongoing": {
          "description": "A flag indicating job status of scan all.",
          "type": "boolean",
          "x-omitempty": false
        },
        "total": {
          "description": "The total number of scan processes triggered by the scan all action",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 100
        },
        "trigger": {
          "description": "The trigger of the scan all job.",
          "type": "string",
          "enum": [
            "Manual",
            "Schedule",
            "Event"
          ]
        }
      }
    },
    "Storage": {
      "type": "object",
      "properties": {
        "free": {
          "description": "Free volume size.",
          "type": "integer",
          "format": "uint64"
        },
        "total": {
          "description": "Total volume size.",
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "SystemInfo": {
      "type": "object",
      "properties": {
        "storage": {
          "description": "The storage of system.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Storage"
          }
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "artifact_id": {
          "description": "The ID of the artifact that the tag attached to",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "The ID of the tag",
          "type": "integer",
          "format": "int64"
        },
        "immutable": {
          "description": "The immutable status of the tag",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "pull_time": {
          "description": "The latest pull time of the tag",
          "type": "string",
          "format": "date-time"
        },
        "push_time": {
          "description": "The push time of the tag",
          "type": "string",
          "format": "date-time"
        },
        "repository_id": {
          "description": "The ID of the repository that the tag belongs to",
          "type": "integer",
          "format": "int64"
        },
        "signed": {
          "description": "The attribute indicates whether the tag is signed or not",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "Task": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of task",
          "type": "string"
        },
        "end_time": {
          "description": "The end time of task",
          "type": "string"
        },
        "execution_id": {
          "description": "The ID of task execution",
          "type": "integer"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "id": {
          "description": "The ID of task",
          "type": "integer"
        },
        "run_count": {
          "description": "The count of task run",
          "type": "integer",
          "format": "int32"
        },
        "start_time": {
          "description": "The start time of task",
          "type": "string"
        },
        "status": {
          "description": "The status of task",
          "type": "string"
        },
        "status_message": {
          "description": "The status message of task",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of task",
          "type": "string"
        }
      }
    },
    "VulnerabilitySummary": {
      "description": "VulnerabilitySummary contains the total number of the foun d vulnerabilities number and numbers of each severity level.\n",
      "type": "object",
      "properties": {
        "fixable": {
          "description": "The number of the fixable vulnerabilities",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 100
        },
        "summary": {
          "description": "Numbers of the vulnerabilities with different severity",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int",
            "example": 10
          },
          "x-omitempty": false,
          "example": {
            "Critical": 5,
            "High": 5
          }
        },
        "total": {
          "description": "The total number of the found vulnerabilities",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 500
        }
      }
    }
  },
  "parameters": {
    "acceptVulnerabilities": {
      "type": "string",
      "default": "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0",
      "description": "A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it.\nCurrently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'",
      "name": "X-Accept-Vulnerabilities",
      "in": "header"
    },
    "digest": {
      "type": "string",
      "description": "The digest of the resource",
      "name": "digest",
      "in": "path",
      "required": true
    },
    "executionId": {
      "type": "integer",
      "description": "Execution ID",
      "name": "execution_id",
      "in": "path",
      "required": true
    },
    "gcId": {
      "type": "integer",
      "format": "int64",
      "description": "The ID of the gc log",
      "name": "gc_id",
      "in": "path",
      "required": true
    },
    "instanceName": {
      "type": "string",
      "description": "Instance Name",
      "name": "preheat_instance_name",
      "in": "path",
      "required": true
    },
    "isResourceName": {
      "type": "boolean",
      "default": false,
      "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
      "name": "X-Is-Resource-Name",
      "in": "header"
    },
    "page": {
      "type": "integer",
      "format": "int64",
      "default": 1,
      "description": "The page number",
      "name": "page",
      "in": "query"
    },
    "pageSize": {
      "maximum": 100,
      "type": "integer",
      "format": "int64",
      "default": 10,
      "description": "The size of per page",
      "name": "page_size",
      "in": "query"
    },
    "preheatPolicyName": {
      "type": "string",
      "description": "Preheat Policy Name",
      "name": "preheat_policy_name",
      "in": "path",
      "required": true
    },
    "projectName": {
      "type": "string",
      "description": "The name of the project",
      "name": "project_name",
      "in": "path",
      "required": true
    },
    "projectNameOrId": {
      "type": "string",
      "description": "The name or id of the project",
      "name": "project_name_or_id",
      "in": "path",
      "required": true
    },
    "query": {
      "type": "string",
      "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
      "name": "q",
      "in": "query"
    },
    "reference": {
      "type": "string",
      "description": "The reference of the artifact, can be digest or tag",
      "name": "reference",
      "in": "path",
      "required": true
    },
    "repositoryName": {
      "type": "string",
      "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
      "name": "repository_name",
      "in": "path",
      "required": true
    },
    "requestId": {
      "minLength": 1,
      "type": "string",
      "description": "An unique ID for the request",
      "name": "X-Request-Id",
      "in": "header"
    },
    "resourceNameInLocation": {
      "type": "boolean",
      "default": false,
      "description": "The flag to indicate whether to return the name of the resource in Location. When X-Resource-Name-In-Location is true, the Location will return the name of the resource.",
      "name": "X-Resource-Name-In-Location",
      "in": "header"
    },
    "robotId": {
      "type": "integer",
      "description": "Robot ID",
      "name": "robot_id",
      "in": "path",
      "required": true
    },
    "tagName": {
      "type": "string",
      "description": "The name of the tag",
      "name": "tag_name",
      "in": "path",
      "required": true
    },
    "taskId": {
      "type": "integer",
      "description": "Task ID",
      "name": "task_id",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "200": {
      "description": "Success",
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "201": {
      "description": "Created",
      "headers": {
        "Location": {
          "type": "string",
          "description": "The location of the resource"
        },
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "202": {
      "description": "Accepted",
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "400": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "404": {
      "description": "Not found",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "405": {
      "description": "Method not allowed",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "409": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "412": {
      "description": "Precondition failed",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "500": {
      "description": "Internal server error",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basic": []
    },
    {}
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "These APIs provide services for manipulating Harbor project.",
    "title": "Harbor API",
    "version": "2.0"
  },
  "host": "localhost",
  "basePath": "/api/v2.0",
  "paths": {
    "/audit-logs": {
      "get": {
        "description": "This endpoint let user see the recent operation logs of the projects which he is member of\n",
        "tags": [
          "auditlog"
        ],
        "summary": "Get recent logs of the projects which the user is a member of",
        "operationId": "listAuditLogs",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditLog"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of auditlogs"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/icons/{digest}": {
      "get": {
        "description": "Get the artifact icon with the specified digest. As the original icon image is resized and encoded before returning, the parameter \"digest\" in the path doesn't match the hash of the returned content",
        "tags": [
          "icon"
        ],
        "summary": "Get artifact icon",
        "operationId": "getIcon",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The digest of the resource",
            "name": "digest",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Icon"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/p2p/preheat/instances": {
      "get": {
        "description": "List P2P provider instances",
        "tags": [
          "preheat"
        ],
        "summary": "List P2P provider instances",
        "operationId": "ListInstances",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Instance"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of preheating provider instances"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create p2p provider instances",
        "tags": [
          "preheat"
        ],
        "summary": "Create p2p provider instances",
        "operationId": "CreateInstance",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The JSON object of instance.",
            "name": "instance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/p2p/preheat/instances/ping": {
      "post": {
        "description": "This endpoint checks status of a instance, the instance can be given by ID or Endpoint URL (together with credential)\n",
        "tags": [
          "preheat"
        ],
        "summary": "Ping status of a instance.",
        "operationId": "PingInstances",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The JSON object of instance.",
            "name": "instance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Instance not found (when instance is provided by ID)."
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/p2p/preheat/instances/{preheat_instance_name}": {
      "get": {
        "description": "Get a P2P provider instance",
        "tags": [
          "preheat"
        ],
        "summary": "Get a P2P provider instance",
        "operationId": "GetInstance",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Instance Name",
            "name": "preheat_instance_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the specified P2P provider instance",
        "tags": [
          "preheat"
        ],
        "summary": "Update the specified P2P provider instance",
        "operationId": "UpdateInstance",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Instance Name",
            "name": "preheat_instance_name",
            "in": "path",
            "required": true
          },
          {
            "description": "The instance to update",
            "name": "instance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete the specified P2P provider instance",
        "tags": [
          "preheat"
        ],
        "summary": "Delete the specified P2P provider instance",
        "operationId": "DeleteInstance",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Instance Name",
            "name": "preheat_instance_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/p2p/preheat/providers": {
      "get": {
        "description": "List P2P providers",
        "tags": [
          "preheat"
        ],
        "summary": "List P2P providers",
        "operationId": "ListProviders",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Metadata"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "description": "This API simply replies a pong to indicate the process to handle API is up, disregarding the health status of dependent components.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "ping"
        ],
        "summary": "Ping Harbor to check if it's alive.",
        "responses": {
          "200": {
            "description": "The API server is alive",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "description": "This endpoint returns projects created by Harbor.",
        "tags": [
          "project"
        ],
        "summary": "List projects",
        "operationId": "listProjects",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The name of project.",
            "name": "name",
            "in": "query"
          },
          {
            "type": "boolean",
            "format": "int32",
            "description": "The project is public or private.",
            "name": "public",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The name of project owner.",
            "name": "owner",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Bool value indicating whether return detailed information of the project",
            "name": "with_detail",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Return all matched projects.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of projects"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "This endpoint is for user to create a new project.",
        "tags": [
          "project"
        ],
        "summary": "Create a new project.",
        "operationId": "createProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether to return the name of the resource in Location. When X-Resource-Name-In-Location is true, the Location will return the name of the resource.",
            "name": "X-Resource-Name-In-Location",
            "in": "header"
          },
          {
            "description": "New created project.",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectReq"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "head": {
        "description": "This endpoint is used to check if the project name provided already exist.",
        "tags": [
          "project"
        ],
        "summary": "Check if the project name user provided already exists.",
        "operationId": "headProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Project name for checking exists.",
            "name": "project_name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}": {
      "get": {
        "description": "This endpoint returns specific project information by project ID.",
        "tags": [
          "project"
        ],
        "summary": "Return specific project detail information",
        "operationId": "getProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return matched project information.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "This endpoint is aimed to update the properties of a project.",
        "tags": [
          "project"
        ],
        "summary": "Update properties for a selected project.",
        "operationId": "updateProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Updates of project.",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint is aimed to delete project by project ID.",
        "tags": [
          "project"
        ],
        "summary": "Delete project by projectID",
        "operationId": "deleteProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/_deletable": {
      "get": {
        "description": "Get the deletable status of the project",
        "tags": [
          "project"
        ],
        "summary": "Get the deletable status of the project",
        "operationId": "getProjectDeletable",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return deletable status of the project.",
            "schema": {
              "$ref": "#/definitions/ProjectDeletable"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/robots": {
      "get": {
        "description": "Get all robot accounts of specified project",
        "tags": [
          "robotv1"
        ],
        "summary": "Get all robot accounts of specified project",
        "operationId": "ListRobotV1",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Robot"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of robot accounts"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a robot account",
        "tags": [
          "robotv1"
        ],
        "summary": "Create a robot account",
        "operationId": "CreateRobotV1",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotCreateV1"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RobotCreated"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/robots/{robot_id}": {
      "get": {
        "description": "This endpoint returns specific robot account information by robot ID.",
        "tags": [
          "robotv1"
        ],
        "summary": "Get a robot account",
        "operationId": "GetRobotByIDV1",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Robot ID",
            "name": "robot_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return matched robot information.",
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Used to disable/enable a specified robot account.",
        "tags": [
          "robotv1"
        ],
        "summary": "Update status of robot account.",
        "operationId": "UpdateRobotV1",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Robot ID",
            "name": "robot_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes specific robot account information by robot ID.",
        "tags": [
          "robotv1"
        ],
        "summary": "Delete a robot account",
        "operationId": "DeleteRobotV1",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Robot ID",
            "name": "robot_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/summary": {
      "get": {
        "description": "Get summary of the project.",
        "tags": [
          "project"
        ],
        "summary": "Get summary of the project.",
        "operationId": "getProjectSummary",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get summary of the project successfully.",
            "schema": {
              "$ref": "#/definitions/ProjectSummary"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/logs": {
      "get": {
        "description": "Get recent logs of the projects",
        "tags": [
          "project"
        ],
        "summary": "Get recent logs of the projects",
        "operationId": "getLogs",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditLog"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of auditlogs"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies": {
      "get": {
        "description": "List preheat policies",
        "tags": [
          "preheat"
        ],
        "summary": "List preheat policies",
        "operationId": "ListPolicies",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List preheat policies success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PreheatPolicy"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of policies"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a preheat policy under a project",
        "tags": [
          "preheat"
        ],
        "summary": "Create a preheat policy under a project",
        "operationId": "CreatePolicy",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "description": "The policy schema info",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}": {
      "get": {
        "description": "Get a preheat policy",
        "tags": [
          "preheat"
        ],
        "summary": "Get a preheat policy",
        "operationId": "GetPolicy",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get a preheat policy success",
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update preheat policy",
        "tags": [
          "preheat"
        ],
        "summary": "Update preheat policy",
        "operationId": "UpdatePolicy",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          },
          {
            "description": "The policy schema info",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Manual preheat",
        "tags": [
          "preheat"
        ],
        "summary": "Manual preheat",
        "operationId": "ManualPreheat",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          },
          {
            "description": "The policy schema info",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a preheat policy",
        "tags": [
          "preheat"
        ],
        "summary": "Delete a preheat policy",
        "operationId": "DeletePolicy",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions": {
      "get": {
        "description": "List executions for the given policy",
        "tags": [
          "preheat"
        ],
        "summary": "List executions for the given policy",
        "operationId": "ListExecutions",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List executions success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Execution"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of executions"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}": {
      "get": {
        "description": "Get a execution detail by id",
        "tags": [
          "preheat"
        ],
        "summary": "Get a execution detail by id",
        "operationId": "GetExecution",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Execution ID",
            "name": "execution_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get execution success",
            "schema": {
              "$ref": "#/definitions/Execution"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "patch": {
        "description": "Stop a execution",
        "tags": [
          "preheat"
        ],
        "summary": "Stop a execution",
        "operationId": "StopExecution",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Execution ID",
            "name": "execution_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The data of execution",
            "name": "execution",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Execution"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks": {
      "get": {
        "description": "List all the related tasks for the given execution",
        "tags": [
          "preheat"
        ],
        "summary": "List all the related tasks for the given execution",
        "operationId": "ListTasks",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Execution ID",
            "name": "execution_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List tasks success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of tasks"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs": {
      "get": {
        "description": "Get the log text stream of the specified task for the given execution",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "preheat"
        ],
        "summary": "Get the log text stream of the specified task for the given execution",
        "operationId": "GetPreheatLog",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Execution ID",
            "name": "execution_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Task ID",
            "name": "task_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get log success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/preheat/providers": {
      "get": {
        "description": "Get all providers at project level",
        "tags": [
          "preheat"
        ],
        "summary": "Get all providers at project level",
        "operationId": "ListProvidersUnderProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProviderUnderProject"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories": {
      "get": {
        "description": "List repositories of the specified project",
        "tags": [
          "repository"
        ],
        "summary": "List repositories",
        "operationId": "listRepositories",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Repository"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of repositories"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}": {
      "get": {
        "description": "Get the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Get repository",
        "operationId": "getRepository",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Update repository",
        "operationId": "updateRepository",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "description": "The JSON object of repository.",
            "name": "repository",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Delete repository",
        "operationId": "deleteRepository",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts": {
      "get": {
        "description": "List artifacts under the specific project and repository. Except the basic properties, the other supported queries in \"q\" includes \"tags=*\" to list only tagged artifacts, \"tags=nil\" to list only untagged artifacts, \"tags=~v\" to list artifacts whose tag fuzzy matches \"v\", \"tags=v\" to list artifact whose tag exactly matches \"v\", \"labels=(id1, id2)\" to list artifacts that both labels with id1 and id2 are added to",
        "tags": [
          "artifact"
        ],
        "summary": "List artifacts",
        "operationId": "listArtifacts",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "default": "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0",
            "description": "A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it.\nCurrently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'",
            "name": "X-Accept-Vulnerabilities",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Specify whether the tags are included inside the returning artifacts",
            "name": "with_tag",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the labels are included inside the returning artifacts",
            "name": "with_label",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the scan overview is included inside the returning artifacts",
            "name": "with_scan_overview",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Artifact"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of artifacts"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Copy the artifact specified in the \"from\" parameter to the repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Copy artifact",
        "operationId": "CopyArtifact",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The artifact from which the new artifact is copied from, the format should be \"project/repository:tag\" or \"project/repository@digest\".",
            "name": "from",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}": {
      "get": {
        "description": "Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the specific artifact",
        "operationId": "getArtifact",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "default": "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0",
            "description": "A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it.\nCurrently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'",
            "name": "X-Accept-Vulnerabilities",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Specify whether the tags are inclued inside the returning artifacts",
            "name": "with_tag",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the labels are inclued inside the returning artifacts",
            "name": "with_label",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the scan overview is inclued inside the returning artifacts",
            "name": "with_scan_overview",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is inclued inside the returning artifacts",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Artifact"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag",
        "tags": [
          "artifact"
        ],
        "summary": "Delete the specific artifact",
        "operationId": "deleteArtifact",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities": {
      "get": {
        "description": "Get the vulnerabilities addition of the artifact specified by the reference under the project and repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the vulnerabilities addition of the specific artifact",
        "operationId": "getVulnerabilitiesAddition",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0",
            "description": "A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it.\nCurrently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'",
            "name": "X-Accept-Vulnerabilities",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the vulnerabilities addition"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}": {
      "get": {
        "description": "Get the addition of the artifact specified by the reference under the project and repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the addition of the specific artifact",
        "operationId": "getAddition",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "build_history",
              "values.yaml",
              "readme.md",
              "dependencies"
            ],
            "type": "string",
            "description": "The type of addition.",
            "name": "addition",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the addition"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels": {
      "post": {
        "description": "Add label to the specified artiact.",
        "tags": [
          "artifact"
        ],
        "summary": "Add label to artifact",
        "operationId": "addLabel",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "description": "The label that added to the artifact. Only the ID property is needed.",
            "name": "label",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}": {
      "delete": {
        "description": "Remove the label from the specified artiact.",
        "tags": [
          "artifact"
        ],
        "summary": "Remove label from artifact",
        "operationId": "removeLabel",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the label that removed from the artifact.",
            "name": "label_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan": {
      "post": {
        "description": "Scan the specified artifact",
        "tags": [
          "scan"
        ],
        "summary": "Scan the artifact",
        "operationId": "scanArtifact",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log": {
      "get": {
        "description": "Get the log of the scan report",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "scan"
        ],
        "summary": "Get the log of the scan report",
        "operationId": "getReportLog",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The report id to get the log",
            "name": "report_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully get scan log file",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags": {
      "get": {
        "description": "List tags of the specific artifact",
        "tags": [
          "artifact"
        ],
        "summary": "List tags",
        "operationId": "listTags",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is included inside the returning tags",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is included inside the returning tags",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of tags"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a tag for the specified artifact",
        "tags": [
          "artifact"
        ],
        "summary": "Create tag",
        "operationId": "createTag",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "description": "The JSON object of tag.",
            "name": "tag",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}": {
      "delete": {
        "description": "Delete the tag of the specified artifact",
        "tags": [
          "artifact"
        ],
        "summary": "Delete tag",
        "operationId": "deleteTag",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the tag",
            "name": "tag_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/replication/executions": {
      "get": {
        "description": "List replication executions",
        "tags": [
          "replication"
        ],
        "summary": "List replication executions",
        "operationId": "listReplicationExecutions",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The ID of the policy that the executions belong to.",
            "name": "policy_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The execution status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The trigger mode.",
            "name": "trigger",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReplicationExecution"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of the resources"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Start one replication execution according to the policy",
        "tags": [
          "replication"
        ],
        "summary": "Start one replication execution",
        "operationId": "startReplication",
        "parameters": [
          {
            "description": "The ID of policy that the execution belongs to",
            "name": "execution",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartReplicationExecution"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/replication/executions/{id}": {
      "get": {
        "description": "Get the replication execution specified by ID",
        "tags": [
          "replication"
        ],
        "summary": "Get the specific replication execution",
        "operationId": "getReplicationExecution",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReplicationExecution"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Stop the replication execution specified by ID",
        "tags": [
          "replication"
        ],
        "summary": "Stop the specific replication execution",
        "operationId": "stopReplication",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/replication/executions/{id}/tasks": {
      "get": {
        "description": "List replication tasks for a specific execution",
        "tags": [
          "replication"
        ],
        "summary": "List replication tasks for a specific execution",
        "operationId": "listReplicationTasks",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution that the tasks belongs to.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The task status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The resource type.",
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReplicationTask"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of the resources"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/replication/executions/{id}/tasks/{task_id}/log": {
      "get": {
        "description": "Get the log of the specific replication task",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "replication"
        ],
        "summary": "Get the log of the specific replication task",
        "operationId": "getReplicationLog",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution that the tasks belongs to.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the task.",
            "name": "task_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of response body"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/retentions": {
      "post": {
        "description": "Create Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when no retention policy binded to project yet.",
        "tags": [
          "Retention"
        ],
        "summary": "Create Retention Policy",
        "operationId": "createRetention",
        "parameters": [
          {
            "description": "Create Retention Policy successfully.",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/retentions/metadatas": {
      "get": {
        "description": "Get Retention Metadatas.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention Metadatas",
        "operationId": "getRentenitionMetadata",
        "responses": {
          "200": {
            "description": "Get Retention Metadatas successfully.",
            "schema": {
              "$ref": "#/definitions/RetentionMetadata"
            }
          }
        }
      }
    },
    "/retentions/{id}": {
      "get": {
        "description": "Get Retention Policy.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention Policy",
        "operationId": "getRetention",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get Retention Policy successfully.",
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.",
        "tags": [
          "Retention"
        ],
        "summary": "Update Retention Policy",
        "operationId": "updateRetention",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update Retention Policy successfully."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/retentions/{id}/executions": {
      "get": {
        "description": "Get Retention executions, execution status may be delayed before job service schedule it up.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention executions",
        "operationId": "listRetentionExecutions",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The size of per page.",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a Retention execution successfully.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/RetentionExecution"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Trigger a Retention Execution, if dry_run is True, nothing would be deleted actually.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Retention"
        ],
        "summary": "Trigger a Retention Execution",
        "operationId": "triggerRetentionExecution",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dry_run": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trigger a Retention job successfully."
          },
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/retentions/{id}/executions/{eid}": {
      "patch": {
        "description": "Stop a Retention execution, only support \"stop\" action now.",
        "tags": [
          "Retention"
        ],
        "summary": "Stop a Retention execution",
        "operationId": "operateRetentionExecution",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "eid",
            "in": "path",
            "required": true
          },
          {
            "description": "The action, only support \"stop\" now.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stop a Retention job successfully."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/retentions/{id}/executions/{eid}/tasks": {
      "get": {
        "description": "Get Retention tasks, each repository as a task.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention tasks",
        "operationId": "listRetentionTasks",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "eid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The size of per page.",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Retention job tasks successfully.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/RetentionExecutionTask"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/retentions/{id}/executions/{eid}/tasks/{tid}": {
      "get": {
        "description": "Get Retention job task log, tags ratain or deletion detail will be shown in a table.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention job task log",
        "operationId": "getRetentionTaskLog",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "eid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "tid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get Retention job task log successfully.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/robots": {
      "get": {
        "description": "List the robot accounts with the specified level and project.",
        "tags": [
          "robot"
        ],
        "summary": "Get robot account",
        "operationId": "ListRobot",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Robot"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of robot accounts"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a robot account",
        "tags": [
          "robot"
        ],
        "summary": "Create a robot account",
        "operationId": "CreateRobot",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RobotCreated"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/robots/{robot_id}": {
      "get": {
        "description": "This endpoint returns specific robot account information by robot ID.",
        "tags": [
          "robot"
        ],
        "summary": "Get a robot account",
        "operationId": "GetRobotByID",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "description": "Robot ID",
            "name": "robot_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return matched robot information.",
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "This endpoint updates specific robot account information by robot ID.",
        "tags": [
          "robot"
        ],
        "summary": "Update a robot account",
        "operationId": "UpdateRobot",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "description": "Robot ID",
            "name": "robot_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes specific robot account information by robot ID.",
        "tags": [
          "robot"
        ],
        "summary": "Delete a robot account",
        "operationId": "DeleteRobot",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "description": "Robot ID",
            "name": "robot_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "patch": {
        "description": "Refresh the robot secret",
        "tags": [
          "robot"
        ],
        "summary": "Refresh the robot secret",
        "operationId": "RefreshSec",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "description": "Robot ID",
            "name": "robot_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robotSec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotSec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return refreshed robot sec.",
            "schema": {
              "$ref": "#/definitions/RobotSec"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/scans/all/metrics": {
      "get": {
        "description": "Get the metrics of the latest scan all process",
        "tags": [
          "scanAll"
        ],
        "summary": "Get the metrics of the latest scan all process",
        "operationId": "getLatestScanAllMetrics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/scans/schedule/metrics": {
      "get": {
        "description": "Get the metrics of the latest scheduled scan all process",
        "tags": [
          "scanAll"
        ],
        "summary": "Get the metrics of the latest scheduled scan all process",
        "operationId": "getLatestScheduledScanAllMetrics",
        "deprecated": true,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/system/gc": {
      "get": {
        "description": "This endpoint let user get gc execution history.",
        "tags": [
          "gc"
        ],
        "summary": "Get gc results.",
        "operationId": "getGCHistory",
        "parameters": [
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get gc results successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GCHistory"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of history"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/system/gc/schedule": {
      "get": {
        "description": "This endpoint is for get schedule of gc job.",
        "tags": [
          "gc"
        ],
        "summary": "Get gc's schedule.",
        "operationId": "getGCSchedule",
        "responses": {
          "200": {
            "description": "Get gc's schedule.",
            "schema": {
              "$ref": "#/definitions/GCHistory"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "This endpoint is for update gc schedule.\n",
        "tags": [
          "gc"
        ],
        "summary": "Update gc's schedule.",
        "operationId": "updateGCSchedule",
        "parameters": [
          {
            "description": "Updates of gc's schedule.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated gc's schedule successfully."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "This endpoint is for update gc schedule.\n",
        "tags": [
          "gc"
        ],
        "summary": "Create a gc schedule.",
        "operationId": "createGCSchedule",
        "parameters": [
          {
            "description": "Updates of gc's schedule.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/system/gc/{gc_id}": {
      "get": {
        "description": "This endpoint let user get gc status filtered by specific ID.",
        "tags": [
          "gc"
        ],
        "summary": "Get gc status.",
        "operationId": "getGC",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the gc log",
            "name": "gc_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get gc results successfully.",
            "schema": {
              "$ref": "#/definitions/GCHistory"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/system/gc/{gc_id}/log": {
      "get": {
        "description": "This endpoint let user get gc job logs filtered by specific ID.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "gc"
        ],
        "summary": "Get gc job log.",
        "operationId": "getGCLog",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the gc log",
            "name": "gc_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get successfully.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/system/scanAll/schedule": {
      "get": {
        "description": "This endpoint is for getting a schedule for the scan all job, which scans all of images in Harbor.",
        "tags": [
          "scanAll"
        ],
        "summary": "Get scan all's schedule.",
        "operationId": "getScanAllSchedule",
        "responses": {
          "200": {
            "description": "Get a schedule for the scan all job, which scans all of images in Harbor.",
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "This endpoint is for updating the schedule of scan all job, which scans all of images in Harbor.",
        "tags": [
          "scanAll"
        ],
        "summary": "Update scan all's schedule.",
        "operationId": "updateScanAllSchedule",
        "parameters": [
          {
            "description": "Updates the schedule of scan all job, which scans all of images in Harbor.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "This endpoint is for creating a schedule or a manual trigger for the scan all job, which scans all of images in Harbor.",
        "tags": [
          "scanAll"
        ],
        "summary": "Create a schedule or a manual trigger for the scan all job.",
        "operationId": "createScanAllSchedule",
        "parameters": [
          {
            "description": "Create a schedule or a manual trigger for the scan all job.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/systeminfo": {
      "get": {
        "description": "This API is for retrieving general system info, this can be called by anonymous request.  Some attributes will be omitted in the response when this API is called by anonymous request.\n",
        "tags": [
          "systeminfo"
        ],
        "summary": "Get general system info",
        "responses": {
          "200": {
            "description": "Get general info successfully.",
            "schema": {
              "$ref": "#/definitions/GeneralInfo"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/systeminfo/getcert": {
      "get": {
        "description": "This endpoint is for downloading a default root certificate.\n",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "systeminfo"
        ],
        "summary": "Get default root certificate.",
        "responses": {
          "200": {
            "description": "Get default root certificate successfully.",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "To set the filename of the downloaded file."
              }
            }
          },
          "404": {
            "description": "Not found the default root certificate."
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/systeminfo/volumes": {
      "get": {
        "description": "This endpoint is for retrieving system volume info that only provides for admin user.  Note that the response only reflects the storage status of local disk.\n",
        "tags": [
          "systeminfo"
        ],
        "summary": "Get system volume info (total/free size).",
        "responses": {
          "200": {
            "description": "Get system volumes successfully.",
            "schema": {
              "$ref": "#/definitions/SystemInfo"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Access": {
      "type": "object",
      "properties": {
        "action": {
          "description": "The action of the access",
          "type": "string"
        },
        "effect": {
          "description": "The effect of the access",
          "type": "string"
        },
        "resource": {
          "description": "The resource of the access",
          "type": "string"
        }
      }
    },
    "AdditionLink": {
      "type": "object",
      "properties": {
        "absolute": {
          "description": "Determine whether the link is an absolute URL or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "href": {
          "description": "The link of the addition",
          "type": "string"
        }
      }
    },
    "AdditionLinks": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AdditionLink"
      }
    },
    "Annotations": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "Artifact": {
      "type": "object",
      "properties": {
        "addition_links": {
          "$ref": "#/definitions/AdditionLinks"
        },
        "annotations": {
          "$ref": "#/definitions/Annotations"
        },
        "digest": {
          "description": "The digest of the artifact",
          "type": "string"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "icon": {
          "description": "The digest of the icon",
          "type": "string"
        },
        "id": {
          "description": "The ID of the artifact",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "manifest_media_type": {
          "description": "The manifest media type of the artifact",
          "type": "string"
        },
        "media_type": {
          "description": "The media type of the artifact",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of the project that the artifact belongs to",
          "type": "integer",
          "format": "int64"
        },
        "pull_time": {
          "description": "The latest pull time of the artifact",
          "type": "string",
          "format": "date-time"
        },
        "push_time": {
          "description": "The push time of the artifact",
          "type": "string",
          "format": "date-time"
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "repository_id": {
          "description": "The ID of the repository that the artifact belongs to",
          "type": "integer",
          "format": "int64"
        },
        "scan_overview": {
          "description": "The overview of the scan result.",
          "$ref": "#/definitions/ScanOverview"
        },
        "size": {
          "description": "The size of the artifact",
          "type": "integer",
          "format": "int64"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "type": {
          "description": "The type of the artifact, e.g. image, chart, etc",
          "type": "string"
        }
      }
    },
    "AuditLog": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the audit log entry.",
          "type": "integer"
        },
        "op_time": {
          "description": "The time when this operation is triggered.",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T15:04:05"
        },
        "operation": {
          "description": "The operation against the repository in this log entry.",
          "type": "string"
        },
        "resource": {
          "description": "Name of the repository in this log entry.",
          "type": "string"
        },
        "resource_type": {
          "description": "Tag of the repository in this log entry.",
          "type": "string"
        },
        "username": {
          "description": "Username of the user in this log entry.",
          "type": "string"
        }
      }
    },
    "AuthproxySetting": {
      "type": "object",
      "properties": {
        "endpoint": {
          "description": "The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'",
          "type": "string"
        },
        "server_certificate": {
          "description": "The certificate to be pinned when connecting auth proxy.",
          "type": "string"
        },
        "skip_search": {
          "description": "The flag to determine whether Harbor can skip search the user/group when adding him as a member.",
          "type": "boolean"
        },
        "tokenreivew_endpoint": {
          "description": "The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'",
          "type": "string"
        },
        "verify_cert": {
          "description": "The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.",
          "type": "boolean"
        }
      }
    },
    "CVEAllowlist": {
      "description": "The CVE Allowlist for system or project",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the allowlist.",
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "description": "the time for expiration of the allowlist, in the form of seconds since epoch.  This is an optional attribute, if it's not set the CVE allowlist does not expire.",
          "type": "integer",
          "x-nullable": true
        },
        "id": {
          "description": "ID of the allowlist",
          "type": "integer"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CVEAllowlistItem"
          }
        },
        "project_id": {
          "description": "ID of the project which the allowlist belongs to.  For system level allowlist this attribute is zero.",
          "type": "integer"
        },
        "update_time": {
          "description": "The update time of the allowlist.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CVEAllowlistItem": {
      "description": "The item in CVE allowlist",
      "type": "object",
      "properties": {
        "cve_id": {
          "description": "The ID of the CVE, such as \"CVE-2019-10164\"",
          "type": "string"
        }
      }
    },
    "Error": {
      "description": "a model for all the error response coming from harbor",
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code",
          "type": "string"
        },
        "message": {
          "description": "The error message",
          "type": "string"
        }
      }
    },
    "Errors": {
      "description": "The error array that describe the errors got during the handling of request",
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "Execution": {
      "type": "object",
      "properties": {
        "end_time": {
          "description": "The end time of execution",
          "type": "string"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "id": {
          "description": "The ID of execution",
          "type": "integer"
        },
        "metrics": {
          "$ref": "#/definitions/Metrics"
        },
        "start_time": {
          "description": "The start time of execution",
          "type": "string"
        },
        "status": {
          "description": "The status of execution",
          "type": "string"
        },
        "status_message": {
          "description": "The status message of execution",
          "type": "string"
        },
        "trigger": {
          "description": "The trigger of execution",
          "type": "string"
        },
        "vendor_id": {
          "description": "The vendor id of execution",
          "type": "integer"
        },
        "vendor_type": {
          "description": "The vendor type of execution",
          "type": "string"
        }
      }
    },
    "ExtraAttrs": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "GCHistory": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "the creation time of gc job.",
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "description": "if gc job was deleted.",
          "type": "boolean"
        },
        "id": {
          "description": "the id of gc job.",
          "type": "integer"
        },
        "job_kind": {
          "description": "the job kind of gc job.",
          "type": "string"
        },
        "job_name": {
          "description": "the job name of gc job.",
          "type": "string"
        },
        "job_parameters": {
          "description": "the job parameters of gc job.",
          "type": "string"
        },
        "job_status": {
          "description": "the status of gc job.",
          "type": "string"
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleObj"
        },
        "update_time": {
          "description": "the update time of gc job.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "GeneralInfo": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "description": "The auth mode of current Harbor instance.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "authproxy_settings": {
          "description": "The setting of auth proxy this is only available when Harbor relies on authproxy for authentication.",
          "x-nullable": true,
          "x-omitempty": true,
          "$ref": "#/definitions/AuthproxySetting"
        },
        "external_url": {
          "description": "The external URL of Harbor, with protocol.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "harbor_version": {
          "description": "The build version of Harbor.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "has_ca_root": {
          "description": "Indicate whether there is a ca root cert file ready for download in the file system.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "notification_enable": {
          "description": "The flag to indicate whether notification mechanism is enabled on Harbor instance.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "project_creation_restriction": {
          "description": "Indicate who can create projects, it could be 'adminonly' or 'everyone'.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "read_only": {
          "description": "The flag to indicate whether Harbor is in readonly mode.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "registry_storage_provider_name": {
          "description": "The storage provider's name of Harbor registry",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "registry_url": {
          "description": "The url of registry against which the docker command should be issued.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "self_registration": {
          "description": "Indicate whether the Harbor instance enable user to register himself.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "with_chartmuseum": {
          "description": "If the Harbor instance is deployed with nested chartmuseum.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "with_notary": {
          "description": "If the Harbor instance is deployed with nested notary.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        }
      }
    },
    "Icon": {
      "type": "object",
      "properties": {
        "content": {
          "description": "The base64 encoded content of the icon",
          "type": "string"
        },
        "content-type": {
          "description": "The content type of the icon",
          "type": "string"
        }
      }
    },
    "Instance": {
      "type": "object",
      "properties": {
        "auth_info": {
          "description": "The auth credential data if exists",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "auth_mode": {
          "description": "The authentication way supported",
          "type": "string"
        },
        "default": {
          "description": "Whether the instance is default or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "description": {
          "description": "Description of instance",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the instance is activated or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "endpoint": {
          "description": "The service endpoint of this instance",
          "type": "string"
        },
        "id": {
          "description": "Unique ID",
          "type": "integer"
        },
        "insecure": {
          "description": "Whether the instance endpoint is insecure or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "Instance name",
          "type": "string"
        },
        "setup_timestamp": {
          "description": "The timestamp of instance setting up",
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "description": "The health status",
          "type": "string"
        },
        "vendor": {
          "description": "Based on which driver, identified by ID",
          "type": "string"
        }
      }
    },
    "Label": {
      "type": "object",
      "properties": {
        "color": {
          "description": "The color the label",
          "type": "string"
        },
        "creation_time": {
          "description": "The creation time the label",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description the label",
          "type": "string"
        },
        "id": {
          "description": "The ID of the label",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name the label",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of project that the label belongs to",
          "type": "integer",
          "format": "int64"
        },
        "scope": {
          "description": "The scope the label",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the label",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "icon": {
          "description": "icon",
          "type": "string"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "maintainers": {
          "description": "maintainers",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "source": {
          "description": "source",
          "type": "string"
        },
        "version": {
          "description": "version",
          "type": "string"
        }
      }
    },
    "Metrics": {
      "type": "object",
      "properties": {
        "error_task_count": {
          "description": "The count of error task",
          "type": "integer"
        },
        "pending_task_count": {
          "description": "The count of pending task",
          "type": "integer"
        },
        "running_task_count": {
          "description": "The count of running task",
          "type": "integer"
        },
        "scheduled_task_count": {
          "description": "The count of scheduled task",
          "type": "integer"
        },
        "stopped_task_count": {
          "description": "The count of stopped task",
          "type": "integer"
        },
        "success_task_count": {
          "description": "The count of success task",
          "type": "integer"
        },
        "task_count": {
          "description": "The count of task",
          "type": "integer"
        }
      }
    },
    "NativeReportSummary": {
      "description": "The summary for the native report",
      "type": "object",
      "properties": {
        "complete_percent": {
          "description": "The complete percent of the scanning which value is between 0 and 100",
          "type": "integer",
          "example": 100
        },
        "duration": {
          "description": "The seconds spent for generating the report",
          "type": "integer",
          "format": "int64",
          "example": 300
        },
        "end_time": {
          "description": "The end time of the scan process that generating report",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T15:04:05"
        },
        "report_id": {
          "description": "id of the native scan report",
          "type": "string",
          "example": "5f62c830-f996-11e9-957f-0242c0a89008"
        },
        "scan_status": {
          "description": "The status of the report generating process",
          "type": "string",
          "example": "Success"
        },
        "scanner": {
          "$ref": "#/definitions/Scanner"
        },
        "severity": {
          "description": "The overall severity",
          "type": "string",
          "example": "High"
        },
        "start_time": {
          "description": "The start time of the scan process that generating report",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T14:04:05"
        },
        "summary": {
          "$ref": "#/definitions/VulnerabilitySummary"
        }
      }
    },
    "Platform": {
      "type": "object",
      "properties": {
        "'os.features'": {
          "description": "The features of the OS that the artifact applys to",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "'os.version'": {
          "description": "The version of the OS that the artifact applys to",
          "type": "string"
        },
        "architecture": {
          "description": "The architecture that the artifact applys to",
          "type": "string"
        },
        "os": {
          "description": "The OS that the artifact applys to",
          "type": "string"
        },
        "variant": {
          "description": "The variant of the CPU",
          "type": "string"
        }
      }
    },
    "PreheatPolicy": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The Create Time of preheat policy",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The Description of preheat policy",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the preheat policy enabled",
          "type": "boolean",
          "x-omitempty": false
        },
        "filters": {
          "description": "The Filters of preheat policy",
          "type": "string"
        },
        "id": {
          "description": "The ID of preheat policy",
          "type": "integer"
        },
        "name": {
          "description": "The Name of preheat policy",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of preheat policy project",
          "type": "integer"
        },
        "provider_id": {
          "description": "The ID of preheat policy provider",
          "type": "integer"
        },
        "provider_name": {
          "description": "The Name of preheat policy provider",
          "type": "string"
        },
        "trigger": {
          "description": "The Trigger of preheat policy",
          "type": "string"
        },
        "update_time": {
          "description": "The Update Time of preheat policy",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "chart_count": {
          "description": "The total number of charts under this project.",
          "type": "integer"
        },
        "creation_time": {
          "description": "The creation time of the project.",
          "type": "string",
          "format": "date-time"
        },
        "current_user_role_id": {
          "description": "The role ID with highest permission of the current user who triggered the API (for UI).  This attribute is deprecated and will be removed in future versions.",
          "type": "integer"
        },
        "current_user_role_ids": {
          "description": "The list of role ID of the current user who triggered the API (for UI)",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "cve_allowlist": {
          "description": "The CVE allowlist of this project.",
          "$ref": "#/definitions/CVEAllowlist"
        },
        "deleted": {
          "description": "A deletion mark of the project.",
          "type": "boolean"
        },
        "metadata": {
          "description": "The metadata of the project.",
          "$ref": "#/definitions/ProjectMetadata"
        },
        "name": {
          "description": "The name of the project.",
          "type": "string"
        },
        "owner_id": {
          "description": "The owner ID of the project always means the creator of the project.",
          "type": "integer",
          "format": "int32"
        },
        "owner_name": {
          "description": "The owner name of the project.",
          "type": "string"
        },
        "project_id": {
          "description": "Project ID",
          "type": "integer",
          "format": "int32"
        },
        "registry_id": {
          "description": "The ID of referenced registry when the project is a proxy cache project.",
          "type": "integer",
          "format": "int64"
        },
        "repo_count": {
          "description": "The number of the repositories under this project.",
          "type": "integer"
        },
        "togglable": {
          "description": "Correspond to the UI about whether the project's publicity is  updatable (for UI)",
          "type": "boolean"
        },
        "update_time": {
          "description": "The update time of the project.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ProjectDeletable": {
      "type": "object",
      "properties": {
        "deletable": {
          "description": "Whether the project can be deleted.",
          "type": "boolean"
        },
        "message": {
          "description": "The detail message when the project can not be deleted.",
          "type": "string"
        }
      }
    },
    "ProjectMetadata": {
      "type": "object",
      "properties": {
        "auto_scan": {
          "description": "Whether scan images automatically when pushing. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-nullable": true
        },
        "enable_content_trust": {
          "description": "Whether content trust is enabled or not. If it is enabled, user can't pull unsigned images from this project. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-nullable": true
        },
        "prevent_vul": {
          "description": "Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-nullable": true
        },
        "public": {
          "description": "The public status of the project. The valid values are \"true\", \"false\".",
          "type": "string"
        },
        "retention_id": {
          "description": "The ID of the tag retention policy for the project",
          "type": "string",
          "x-nullable": true
        },
        "reuse_sys_cve_allowlist": {
          "description": "Whether this project reuse the system level CVE allowlist as the allowlist of its own.  The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.",
          "type": "string",
          "x-nullable": true
        },
        "severity": {
          "description": "If the vulnerability is high than severity defined here, the images can't be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "ProjectReq": {
      "type": "object",
      "properties": {
        "cve_allowlist": {
          "description": "The CVE allowlist of the project.",
          "$ref": "#/definitions/CVEAllowlist"
        },
        "metadata": {
          "description": "The metadata of the project.",
          "$ref": "#/definitions/ProjectMetadata"
        },
        "project_name": {
          "description": "The name of the project.",
          "type": "string"
        },
        "public": {
          "description": "deprecated, reserved for project creation in replication",
          "type": "boolean",
          "x-nullable": true
        },
        "registry_id": {
          "description": "The ID of referenced registry when creating the proxy cache project",
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        },
        "storage_limit": {
          "description": "The storage quota of the project.",
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        }
      }
    },
    "ProjectSummary": {
      "type": "object",
      "properties": {
        "chart_count": {
          "description": "The total number of charts under this project.",
          "type": "integer"
        },
        "developer_count": {
          "description": "The total number of developer members.",
          "type": "integer"
        },
        "guest_count": {
          "description": "The total number of guest members.",
          "type": "integer"
        },
        "limited_guest_count": {
          "description": "The total number of limited guest members.",
          "type": "integer"
        },
        "maintainer_count": {
          "description": "The total number of maintainer members.",
          "type": "integer"
        },
        "project_admin_count": {
          "description": "The total number of project admin members.",
          "type": "integer"
        },
        "quota": {
          "type": "object",
          "properties": {
            "hard": {
              "description": "The hard limits of the quota",
              "$ref": "#/definitions/ResourceList"
            },
            "used": {
              "description": "The used status of the quota",
              "$ref": "#/definitions/ResourceList"
            }
          }
        },
        "registry": {
          "$ref": "#/definitions/Registry"
        },
        "repo_count": {
          "description": "The number of the repositories under this project.",
          "type": "integer"
        }
      }
    },
    "ProviderUnderProject": {
      "type": "object",
      "properties": {
        "default": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "provider": {
          "type": "string"
        }
      }
    },
    "Reference": {
      "type": "object",
      "properties": {
        "annotations": {
          "$ref": "#/definitions/Annotations"
        },
        "child_digest": {
          "description": "The digest of the child artifact",
          "type": "string"
        },
        "child_id": {
          "description": "The child ID of the reference",
          "type": "integer",
          "format": "int64"
        },
        "parent_id": {
          "description": "The parent ID of the reference",
          "type": "integer",
          "format": "int64"
        },
        "platform": {
          "$ref": "#/definitions/Platform"
        },
        "urls": {
          "description": "The download URLs",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Registry": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The create time of the policy.",
          "type": "string"
        },
        "credential": {
          "$ref": "#/definitions/RegistryCredential"
        },
        "description": {
          "description": "Description of the registry.",
          "type": "string"
        },
        "id": {
          "description": "The registry ID.",
          "type": "integer",
          "format": "int64"
        },
        "insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the server.",
          "type": "boolean"
        },
        "name": {
          "description": "The registry name.",
          "type": "string"
        },
        "status": {
          "description": "Health status of the registry.",
          "type": "string"
        },
        "type": {
          "description": "Type of the registry, e.g. 'harbor'.",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the policy.",
          "type": "string"
        },
        "url": {
          "description": "The registry URL string.",
          "type": "string"
        }
      }
    },
    "RegistryCredential": {
      "type": "object",
      "properties": {
        "access_key": {
          "description": "Access key, e.g. user name when credential type is 'basic'.",
          "type": "string"
        },
        "access_secret": {
          "description": "Access secret, e.g. password when credential type is 'basic'.",
          "type": "string"
        },
        "type": {
          "description": "Credential type, such as 'basic', 'oauth'.",
          "type": "string"
        }
      }
    },
    "ReplicationExecution": {
      "description": "The replication execution",
      "type": "object",
      "properties": {
        "end_time": {
          "description": "The end time",
          "type": "string",
          "format": "date-time"
        },
        "failed": {
          "description": "The count of failed executions",
          "type": "integer",
          "x-omitempty": false
        },
        "id": {
          "description": "The ID of the execution",
          "type": "integer"
        },
        "in_progress": {
          "description": "The count of in_progress executions",
          "type": "integer",
          "x-omitempty": false
        },
        "policy_id": {
          "description": "The ID if the policy that the execution belongs to",
          "type": "integer"
        },
        "start_time": {
          "description": "The start time",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The status of the execution",
          "type": "string"
        },
        "status_text": {
          "description": "The status text",
          "type": "string",
          "x-omitempty": false
        },
        "stopped": {
          "description": "The count of stopped executions",
          "type": "integer",
          "x-omitempty": false
        },
        "succeed": {
          "description": "The count of succeed executions",
          "type": "integer",
          "x-omitempty": false
        },
        "total": {
          "description": "The total count of all executions",
          "type": "integer",
          "x-omitempty": false
        },
        "trigger": {
          "description": "The trigger mode",
          "type": "string"
        }
      }
    },
    "ReplicationTask": {
      "description": "The replication task",
      "type": "object",
      "properties": {
        "dst_resource": {
          "description": "The destination resource that the task operates",
          "type": "string"
        },
        "end_time": {
          "description": "The end time of the task",
          "type": "string",
          "format": "date-time"
        },
        "execution_id": {
          "description": "The ID of the execution that the task belongs to",
          "type": "integer"
        },
        "id": {
          "description": "The ID of the task",
          "type": "integer"
        },
        "job_id": {
          "description": "The ID of the underlying job that the task related to",
          "type": "string"
        },
        "operation": {
          "description": "The operation of the task",
          "type": "string"
        },
        "resource_type": {
          "description": "The type of the resource that the task operates",
          "type": "string"
        },
        "src_resource": {
          "description": "The source resource that the task operates",
          "type": "string"
        },
        "start_time": {
          "description": "The start time of the task",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The status of the task",
          "type": "string"
        }
      }
    },
    "Repository": {
      "type": "object",
      "properties": {
        "artifact_count": {
          "description": "The count of the artifacts inside the repository",
          "type": "integer",
          "format": "int64"
        },
        "creation_time": {
          "description": "The creation time of the repository",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the repository",
          "type": "string"
        },
        "id": {
          "description": "The ID of the repository",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of the repository",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of the project that the repository belongs to",
          "type": "integer",
          "format": "int64"
        },
        "pull_count": {
          "description": "The count that the artifact inside the repository pulled",
          "type": "integer",
          "format": "int64"
        },
        "update_time": {
          "description": "The update time of the repository",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ResourceList": {
      "type": "object",
      "additionalProperties": {
        "type": "integer",
        "format": "int64"
      }
    },
    "RetentionExecution": {
      "type": "object",
      "properties": {
        "dry_run": {
          "type": "boolean"
        },
        "end_time": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "policy_id": {
          "type": "integer",
          "format": "int64"
        },
        "start_time": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "trigger": {
          "type": "string"
        }
      }
    },
    "RetentionExecutionTask": {
      "type": "object",
      "properties": {
        "end_time": {
          "type": "string"
        },
        "execution_id": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "job_id": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "retained": {
          "type": "integer",
          "x-omitempty": false
        },
        "start_time": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "status_code": {
          "type": "integer",
          "x-omitempty": false
        },
        "status_revision": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "RetentionMetadata": {
      "description": "the tag retention metadata",
      "type": "object",
      "properties": {
        "scope_selectors": {
          "description": "supported scope selectors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelectorMetadata"
          }
        },
        "tag_selectors": {
          "description": "supported tag selectors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelectorMetadata"
          }
        },
        "templates": {
          "description": "templates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRuleMetadata"
          }
        }
      }
    },
    "RetentionPolicy": {
      "description": "retention policy",
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRule"
          }
        },
        "scope": {
          "type": "object",
          "$ref": "#/definitions/RetentionPolicyScope"
        },
        "trigger": {
          "type": "object",
          "$ref": "#/definitions/RetentionRuleTrigger"
        }
      }
    },
    "RetentionPolicyScope": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string"
        },
        "ref": {
          "type": "integer"
        }
      }
    },
    "RetentionRule": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "priority": {
          "type": "integer"
        },
        "scope_selectors": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RetentionSelector"
            }
          }
        },
        "tag_selectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelector"
          }
        },
        "template": {
          "type": "string"
        }
      }
    },
    "RetentionRuleMetadata": {
      "description": "the tag retention rule metadata",
      "type": "object",
      "properties": {
        "action": {
          "description": "rule action",
          "type": "string"
        },
        "display_text": {
          "description": "rule display text",
          "type": "string"
        },
        "params": {
          "description": "rule params",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRuleParamMetadata"
          }
        },
        "rule_template": {
          "description": "rule id",
          "type": "string"
        }
      }
    },
    "RetentionRuleParamMetadata": {
      "description": "rule param",
      "type": "object",
      "properties": {
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "RetentionRuleTrigger": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "references": {
          "type": "object"
        },
        "settings": {
          "type": "object"
        }
      }
    },
    "RetentionSelector": {
      "type": "object",
      "properties": {
        "decoration": {
          "type": "string"
        },
        "extras": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        }
      }
    },
    "RetentionSelectorMetadata": {
      "description": "retention selector",
      "type": "object",
      "properties": {
        "decorations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "display_text": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "Robot": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the robot.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the robot",
          "type": "string"
        },
        "disable": {
          "description": "The disable status of the robot",
          "type": "boolean",
          "x-omitempty": false
        },
        "duration": {
          "description": "The duration of the robot in days",
          "type": "integer",
          "format": "int64"
        },
        "editable": {
          "description": "The editable status of the robot",
          "type": "boolean",
          "x-omitempty": false
        },
        "expires_at": {
          "description": "The expiration data of the robot",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "The ID of the robot",
          "type": "integer",
          "format": "int64"
        },
        "level": {
          "description": "The level of the robot, project or system",
          "type": "string"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotPermission"
          }
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the robot.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "RobotCreate": {
      "description": "The request for robot account creation.",
      "type": "object",
      "properties": {
        "description": {
          "description": "The description of the robot",
          "type": "string"
        },
        "disable": {
          "description": "The disable status of the robot",
          "type": "boolean"
        },
        "duration": {
          "description": "The duration of the robot in days",
          "type": "integer",
          "format": "int64"
        },
        "level": {
          "description": "The level of the robot, project or system",
          "type": "string"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotPermission"
          }
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        }
      }
    },
    "RobotCreateV1": {
      "type": "object",
      "properties": {
        "access": {
          "description": "The permission of robot account",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Access"
          }
        },
        "description": {
          "description": "The description of robot account",
          "type": "string"
        },
        "expires_at": {
          "description": "The expiration time on or after which the JWT MUST NOT be accepted for processing.",
          "type": "integer"
        },
        "name": {
          "description": "The name of robot account",
          "type": "string"
        }
      }
    },
    "RobotCreated": {
      "description": "The response for robot account creation.",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the robot.",
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "description": "The expiration data of the robot",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "The ID of the robot",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        }
      }
    },
    "RobotPermission": {
      "type": "object",
      "properties": {
        "access": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Access"
          }
        },
        "kind": {
          "description": "The kind of the permission",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the permission",
          "type": "string"
        }
      }
    },
    "RobotSec": {
      "description": "The response for refresh/update robot account secret.",
      "type": "object",
      "properties": {
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        }
      }
    },
    "ScanOverview": {
      "description": "The scan overview attached in the metadata of tag",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/NativeReportSummary"
      }
    },
    "Scanner": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the scanner",
          "type": "string",
          "example": "Trivy"
        },
        "vendor": {
          "description": "Name of the scanner provider",
          "type": "string",
          "example": "Aqua Security"
        },
        "version": {
          "description": "Version of the scanner adapter",
          "type": "string",
          "example": "v0.9.1"
        }
      }
    },
    "Schedule": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "the creation time of the schedule.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "description": "The id of the schedule.",
          "type": "integer",
          "readOnly": true
        },
        "parameters": {
          "description": "The parameters of schedule job",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleObj"
        },
        "status": {
          "description": "The status of the schedule.",
          "type": "string",
          "readOnly": true
        },
        "update_time": {
          "description": "the update time of the schedule.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ScheduleObj": {
      "type": "object",
      "properties": {
        "cron": {
          "description": "A cron expression, a time-based job scheduler.",
          "type": "string"
        },
        "type": {
          "description": "The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual' and 'None'.\n'Manual' means to trigger it right away and 'None' means to cancel the schedule.\n",
          "type": "string",
          "enum": [
            "Hourly",
            "Daily",
            "Weekly",
            "Custom",
            "Manual",
            "None"
          ]
        }
      }
    },
    "StartReplicationExecution": {
      "type": "object",
      "properties": {
        "policy_id": {
          "description": "The ID of policy that the execution belongs to.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Stats": {
      "description": "Stats provides the overall progress of the scan all process.",
      "type": "object",
      "properties": {
        "completed": {
          "description": "The number of the finished scan processes triggered by the scan all action",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 90
        },
        "metrics": {
          "description": "The metrics data for the each status",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int",
            "example": 10
          },
          "example": {
            "Error": 2,
            "Running": 3,
            "Success": 5
          }
        },
        "ongoing": {
          "description": "A flag indicating job status of scan all.",
          "type": "boolean",
          "x-omitempty": false
        },
        "total": {
          "description": "The total number of scan processes triggered by the scan all action",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 100
        },
        "trigger": {
          "description": "The trigger of the scan all job.",
          "type": "string",
          "enum": [
            "Manual",
            "Schedule",
            "Event"
          ]
        }
      }
    },
    "Storage": {
      "type": "object",
      "properties": {
        "free": {
          "description": "Free volume size.",
          "type": "integer",
          "format": "uint64"
        },
        "total": {
          "description": "Total volume size.",
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "SystemInfo": {
      "type": "object",
      "properties": {
        "storage": {
          "description": "The storage of system.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Storage"
          }
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "artifact_id": {
          "description": "The ID of the artifact that the tag attached to",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "The ID of the tag",
          "type": "integer",
          "format": "int64"
        },
        "immutable": {
          "description": "The immutable status of the tag",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "pull_time": {
          "description": "The latest pull time of the tag",
          "type": "string",
          "format": "date-time"
        },
        "push_time": {
          "description": "The push time of the tag",
          "type": "string",
          "format": "date-time"
        },
        "repository_id": {
          "description": "The ID of the repository that the tag belongs to",
          "type": "integer",
          "format": "int64"
        },
        "signed": {
          "description": "The attribute indicates whether the tag is signed or not",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "Task": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of task",
          "type": "string"
        },
        "end_time": {
          "description": "The end time of task",
          "type": "string"
        },
        "execution_id": {
          "description": "The ID of task execution",
          "type": "integer"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "id": {
          "description": "The ID of task",
          "type": "integer"
        },
        "run_count": {
          "description": "The count of task run",
          "type": "integer",
          "format": "int32"
        },
        "start_time": {
          "description": "The start time of task",
          "type": "string"
        },
        "status": {
          "description": "The status of task",
          "type": "string"
        },
        "status_message": {
          "description": "The status message of task",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of task",
          "type": "string"
        }
      }
    },
    "VulnerabilitySummary": {
      "description": "VulnerabilitySummary contains the total number of the foun d vulnerabilities number and numbers of each severity level.\n",
      "type": "object",
      "properties": {
        "fixable": {
          "description": "The number of the fixable vulnerabilities",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 100
        },
        "summary": {
          "description": "Numbers of the vulnerabilities with different severity",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int",
            "example": 10
          },
          "x-omitempty": false,
          "example": {
            "Critical": 5,
            "High": 5
          }
        },
        "total": {
          "description": "The total number of the found vulnerabilities",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 500
        }
      }
    }
  },
  "parameters": {
    "acceptVulnerabilities": {
      "type": "string",
      "default": "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0",
      "description": "A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it.\nCurrently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'",
      "name": "X-Accept-Vulnerabilities",
      "in": "header"
    },
    "digest": {
      "type": "string",
      "description": "The digest of the resource",
      "name": "digest",
      "in": "path",
      "required": true
    },
    "executionId": {
      "type": "integer",
      "description": "Execution ID",
      "name": "execution_id",
      "in": "path",
      "required": true
    },
    "gcId": {
      "type": "integer",
      "format": "int64",
      "description": "The ID of the gc log",
      "name": "gc_id",
      "in": "path",
      "required": true
    },
    "instanceName": {
      "type": "string",
      "description": "Instance Name",
      "name": "preheat_instance_name",
      "in": "path",
      "required": true
    },
    "isResourceName": {
      "type": "boolean",
      "default": false,
      "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
      "name": "X-Is-Resource-Name",
      "in": "header"
    },
    "page": {
      "type": "integer",
      "format": "int64",
      "default": 1,
      "description": "The page number",
      "name": "page",
      "in": "query"
    },
    "pageSize": {
      "maximum": 100,
      "type": "integer",
      "format": "int64",
      "default": 10,
      "description": "The size of per page",
      "name": "page_size",
      "in": "query"
    },
    "preheatPolicyName": {
      "type": "string",
      "description": "Preheat Policy Name",
      "name": "preheat_policy_name",
      "in": "path",
      "required": true
    },
    "projectName": {
      "type": "string",
      "description": "The name of the project",
      "name": "project_name",
      "in": "path",
      "required": true
    },
    "projectNameOrId": {
      "type": "string",
      "description": "The name or id of the project",
      "name": "project_name_or_id",
      "in": "path",
      "required": true
    },
    "query": {
      "type": "string",
      "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
      "name": "q",
      "in": "query"
    },
    "reference": {
      "type": "string",
      "description": "The reference of the artifact, can be digest or tag",
      "name": "reference",
      "in": "path",
      "required": true
    },
    "repositoryName": {
      "type": "string",
      "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
      "name": "repository_name",
      "in": "path",
      "required": true
    },
    "requestId": {
      "minLength": 1,
      "type": "string",
      "description": "An unique ID for the request",
      "name": "X-Request-Id",
      "in": "header"
    },
    "resourceNameInLocation": {
      "type": "boolean",
      "default": false,
      "description": "The flag to indicate whether to return the name of the resource in Location. When X-Resource-Name-In-Location is true, the Location will return the name of the resource.",
      "name": "X-Resource-Name-In-Location",
      "in": "header"
    },
    "robotId": {
      "type": "integer",
      "description": "Robot ID",
      "name": "robot_id",
      "in": "path",
      "required": true
    },
    "tagName": {
      "type": "string",
      "description": "The name of the tag",
      "name": "tag_name",
      "in": "path",
      "required": true
    },
    "taskId": {
      "type": "integer",
      "description": "Task ID",
      "name": "task_id",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "200": {
      "description": "Success",
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "201": {
      "description": "Created",
      "headers": {
        "Location": {
          "type": "string",
          "description": "The location of the resource"
        },
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "202": {
      "description": "Accepted",
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "400": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "404": {
      "description": "Not found",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "405": {
      "description": "Method not allowed",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "409": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "412": {
      "description": "Precondition failed",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "500": {
      "description": "Internal server error",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basic": []
    },
    {}
  ]
}`))
}
