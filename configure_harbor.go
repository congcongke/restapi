// Code generated by go-swagger; DO NOT EDIT.

package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/congcongke/restapi/operations"
	"github.com/congcongke/restapi/operations/artifact"
	"github.com/congcongke/restapi/operations/auditlog"
	"github.com/congcongke/restapi/operations/gc"
	"github.com/congcongke/restapi/operations/icon"
	"github.com/congcongke/restapi/operations/ping"
	"github.com/congcongke/restapi/operations/preheat"
	"github.com/congcongke/restapi/operations/project"
	"github.com/congcongke/restapi/operations/replication"
	"github.com/congcongke/restapi/operations/repository"
	"github.com/congcongke/restapi/operations/retention"
	"github.com/congcongke/restapi/operations/robot"
	"github.com/congcongke/restapi/operations/robotv1"
	"github.com/congcongke/restapi/operations/scan"
	"github.com/congcongke/restapi/operations/scan_all"
	"github.com/congcongke/restapi/operations/systeminfo"
)

type contextKey string

const AuthKey contextKey = "Auth"

// go:generate mockery -name ArtifactAPI -inpkg

// ArtifactAPI
type ArtifactAPI interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// CopyArtifact is Copy the artifact specified in the "from" parameter to the repository.
	CopyArtifact(ctx context.Context, params artifact.CopyArtifactParams) middleware.Responder
	// AddLabel is Add label to the specified artiact.
	AddLabel(ctx context.Context, params artifact.AddLabelParams) middleware.Responder
	// CreateTag is Create a tag for the specified artifact
	CreateTag(ctx context.Context, params artifact.CreateTagParams) middleware.Responder
	// DeleteArtifact is Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag
	DeleteArtifact(ctx context.Context, params artifact.DeleteArtifactParams) middleware.Responder
	// DeleteTag is Delete the tag of the specified artifact
	DeleteTag(ctx context.Context, params artifact.DeleteTagParams) middleware.Responder
	// GetAddition is Get the addition of the artifact specified by the reference under the project and repository.
	GetAddition(ctx context.Context, params artifact.GetAdditionParams) middleware.Responder
	// GetArtifact is Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.
	GetArtifact(ctx context.Context, params artifact.GetArtifactParams) middleware.Responder
	// GetVulnerabilitiesAddition is Get the vulnerabilities addition of the artifact specified by the reference under the project and repository.
	GetVulnerabilitiesAddition(ctx context.Context, params artifact.GetVulnerabilitiesAdditionParams) middleware.Responder
	// ListArtifacts is List artifacts under the specific project and repository. Except the basic properties, the other supported queries in "q" includes "tags=*" to list only tagged artifacts, "tags=nil" to list only untagged artifacts, "tags=~v" to list artifacts whose tag fuzzy matches "v", "tags=v" to list artifact whose tag exactly matches "v", "labels=(id1, id2)" to list artifacts that both labels with id1 and id2 are added to
	ListArtifacts(ctx context.Context, params artifact.ListArtifactsParams) middleware.Responder
	// ListTags is List tags of the specific artifact
	ListTags(ctx context.Context, params artifact.ListTagsParams) middleware.Responder
	// RemoveLabel is Remove the label from the specified artiact.
	RemoveLabel(ctx context.Context, params artifact.RemoveLabelParams) middleware.Responder
}

// go:generate mockery -name AuditlogAPI -inpkg

// AuditlogAPI
type AuditlogAPI interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// ListAuditLogs is This endpoint let user see the recent operation logs of the projects which he is member of

	ListAuditLogs(ctx context.Context, params auditlog.ListAuditLogsParams) middleware.Responder
}

// go:generate mockery -name GCAPI -inpkg

// GCAPI
type GCAPI interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// CreateGCSchedule is This endpoint is for update gc schedule.

	CreateGCSchedule(ctx context.Context, params gc.CreateGCScheduleParams) middleware.Responder
	// GetGC is This endpoint let user get gc status filtered by specific ID.
	GetGC(ctx context.Context, params gc.GetGCParams) middleware.Responder
	// GetGCHistory is This endpoint let user get gc execution history.
	GetGCHistory(ctx context.Context, params gc.GetGCHistoryParams) middleware.Responder
	// GetGCLog is This endpoint let user get gc job logs filtered by specific ID.
	GetGCLog(ctx context.Context, params gc.GetGCLogParams) middleware.Responder
	// GetGCSchedule is This endpoint is for get schedule of gc job.
	GetGCSchedule(ctx context.Context, params gc.GetGCScheduleParams) middleware.Responder
	// UpdateGCSchedule is This endpoint is for update gc schedule.

	UpdateGCSchedule(ctx context.Context, params gc.UpdateGCScheduleParams) middleware.Responder
}

// go:generate mockery -name IconAPI -inpkg

// IconAPI
type IconAPI interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// GetIcon is Get the artifact icon with the specified digest. As the original icon image is resized and encoded before returning, the parameter "digest" in the path doesn't match the hash of the returned content
	GetIcon(ctx context.Context, params icon.GetIconParams) middleware.Responder
}

// go:generate mockery -name PingAPI -inpkg

// PingAPI
type PingAPI interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// GetPing is This API simply replies a pong to indicate the process to handle API is up, disregarding the health status of dependent components.
	GetPing(ctx context.Context, params ping.GetPingParams) middleware.Responder
}

// go:generate mockery -name PreheatAPI -inpkg

// PreheatAPI
type PreheatAPI interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// CreateInstance is Create p2p provider instances
	CreateInstance(ctx context.Context, params preheat.CreateInstanceParams) middleware.Responder
	// CreatePolicy is Create a preheat policy under a project
	CreatePolicy(ctx context.Context, params preheat.CreatePolicyParams) middleware.Responder
	// DeleteInstance is Delete the specified P2P provider instance
	DeleteInstance(ctx context.Context, params preheat.DeleteInstanceParams) middleware.Responder
	// DeletePolicy is Delete a preheat policy
	DeletePolicy(ctx context.Context, params preheat.DeletePolicyParams) middleware.Responder
	// GetExecution is Get a execution detail by id
	GetExecution(ctx context.Context, params preheat.GetExecutionParams) middleware.Responder
	// GetInstance is Get a P2P provider instance
	GetInstance(ctx context.Context, params preheat.GetInstanceParams) middleware.Responder
	// GetPolicy is Get a preheat policy
	GetPolicy(ctx context.Context, params preheat.GetPolicyParams) middleware.Responder
	// GetPreheatLog is Get the log text stream of the specified task for the given execution
	GetPreheatLog(ctx context.Context, params preheat.GetPreheatLogParams) middleware.Responder
	// ListExecutions is List executions for the given policy
	ListExecutions(ctx context.Context, params preheat.ListExecutionsParams) middleware.Responder
	// ListInstances is List P2P provider instances
	ListInstances(ctx context.Context, params preheat.ListInstancesParams) middleware.Responder
	// ListPolicies is List preheat policies
	ListPolicies(ctx context.Context, params preheat.ListPoliciesParams) middleware.Responder
	// ListProviders is List P2P providers
	ListProviders(ctx context.Context, params preheat.ListProvidersParams) middleware.Responder
	// ListProvidersUnderProject is Get all providers at project level
	ListProvidersUnderProject(ctx context.Context, params preheat.ListProvidersUnderProjectParams) middleware.Responder
	// ListTasks is List all the related tasks for the given execution
	ListTasks(ctx context.Context, params preheat.ListTasksParams) middleware.Responder
	// ManualPreheat is Manual preheat
	ManualPreheat(ctx context.Context, params preheat.ManualPreheatParams) middleware.Responder
	// PingInstances is This endpoint checks status of a instance, the instance can be given by ID or Endpoint URL (together with credential)

	PingInstances(ctx context.Context, params preheat.PingInstancesParams) middleware.Responder
	// StopExecution is Stop a execution
	StopExecution(ctx context.Context, params preheat.StopExecutionParams) middleware.Responder
	// UpdateInstance is Update the specified P2P provider instance
	UpdateInstance(ctx context.Context, params preheat.UpdateInstanceParams) middleware.Responder
	// UpdatePolicy is Update preheat policy
	UpdatePolicy(ctx context.Context, params preheat.UpdatePolicyParams) middleware.Responder
}

// go:generate mockery -name ProjectAPI -inpkg

// ProjectAPI
type ProjectAPI interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// CreateProject is This endpoint is for user to create a new project.
	CreateProject(ctx context.Context, params project.CreateProjectParams) middleware.Responder
	// DeleteProject is This endpoint is aimed to delete project by project ID.
	DeleteProject(ctx context.Context, params project.DeleteProjectParams) middleware.Responder
	// GetLogs is Get recent logs of the projects
	GetLogs(ctx context.Context, params project.GetLogsParams) middleware.Responder
	// GetProject is This endpoint returns specific project information by project ID.
	GetProject(ctx context.Context, params project.GetProjectParams) middleware.Responder
	// GetProjectDeletable is Get the deletable status of the project
	GetProjectDeletable(ctx context.Context, params project.GetProjectDeletableParams) middleware.Responder
	// GetProjectSummary is Get summary of the project.
	GetProjectSummary(ctx context.Context, params project.GetProjectSummaryParams) middleware.Responder
	// HeadProject is This endpoint is used to check if the project name provided already exist.
	HeadProject(ctx context.Context, params project.HeadProjectParams) middleware.Responder
	// ListProjects is This endpoint returns projects created by Harbor.
	ListProjects(ctx context.Context, params project.ListProjectsParams) middleware.Responder
	// UpdateProject is This endpoint is aimed to update the properties of a project.
	UpdateProject(ctx context.Context, params project.UpdateProjectParams) middleware.Responder
}

// go:generate mockery -name ReplicationAPI -inpkg

// ReplicationAPI
type ReplicationAPI interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// GetReplicationExecution is Get the replication execution specified by ID
	GetReplicationExecution(ctx context.Context, params replication.GetReplicationExecutionParams) middleware.Responder
	// GetReplicationLog is Get the log of the specific replication task
	GetReplicationLog(ctx context.Context, params replication.GetReplicationLogParams) middleware.Responder
	// ListReplicationExecutions is List replication executions
	ListReplicationExecutions(ctx context.Context, params replication.ListReplicationExecutionsParams) middleware.Responder
	// ListReplicationTasks is List replication tasks for a specific execution
	ListReplicationTasks(ctx context.Context, params replication.ListReplicationTasksParams) middleware.Responder
	// StartReplication is Start one replication execution according to the policy
	StartReplication(ctx context.Context, params replication.StartReplicationParams) middleware.Responder
	// StopReplication is Stop the replication execution specified by ID
	StopReplication(ctx context.Context, params replication.StopReplicationParams) middleware.Responder
}

// go:generate mockery -name RepositoryAPI -inpkg

// RepositoryAPI
type RepositoryAPI interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// DeleteRepository is Delete the repository specified by name
	DeleteRepository(ctx context.Context, params repository.DeleteRepositoryParams) middleware.Responder
	// GetRepository is Get the repository specified by name
	GetRepository(ctx context.Context, params repository.GetRepositoryParams) middleware.Responder
	// ListRepositories is List repositories of the specified project
	ListRepositories(ctx context.Context, params repository.ListRepositoriesParams) middleware.Responder
	// UpdateRepository is Update the repository specified by name
	UpdateRepository(ctx context.Context, params repository.UpdateRepositoryParams) middleware.Responder
}

// go:generate mockery -name RetentionAPI -inpkg

// RetentionAPI
type RetentionAPI interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// CreateRetention is Create Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when no retention policy binded to project yet.
	CreateRetention(ctx context.Context, params retention.CreateRetentionParams) middleware.Responder
	// GetRentenitionMetadata is Get Retention Metadatas.
	GetRentenitionMetadata(ctx context.Context, params retention.GetRentenitionMetadataParams) middleware.Responder
	// GetRetention is Get Retention Policy.
	GetRetention(ctx context.Context, params retention.GetRetentionParams) middleware.Responder
	// GetRetentionTaskLog is Get Retention job task log, tags ratain or deletion detail will be shown in a table.
	GetRetentionTaskLog(ctx context.Context, params retention.GetRetentionTaskLogParams) middleware.Responder
	// ListRetentionExecutions is Get Retention executions, execution status may be delayed before job service schedule it up.
	ListRetentionExecutions(ctx context.Context, params retention.ListRetentionExecutionsParams) middleware.Responder
	// ListRetentionTasks is Get Retention tasks, each repository as a task.
	ListRetentionTasks(ctx context.Context, params retention.ListRetentionTasksParams) middleware.Responder
	// OperateRetentionExecution is Stop a Retention execution, only support "stop" action now.
	OperateRetentionExecution(ctx context.Context, params retention.OperateRetentionExecutionParams) middleware.Responder
	// TriggerRetentionExecution is Trigger a Retention Execution, if dry_run is True, nothing would be deleted actually.
	TriggerRetentionExecution(ctx context.Context, params retention.TriggerRetentionExecutionParams) middleware.Responder
	// UpdateRetention is Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.
	UpdateRetention(ctx context.Context, params retention.UpdateRetentionParams) middleware.Responder
}

// go:generate mockery -name RobotAPI -inpkg

// RobotAPI
type RobotAPI interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// CreateRobot is Create a robot account
	CreateRobot(ctx context.Context, params robot.CreateRobotParams) middleware.Responder
	// DeleteRobot is This endpoint deletes specific robot account information by robot ID.
	DeleteRobot(ctx context.Context, params robot.DeleteRobotParams) middleware.Responder
	// GetRobotByID is This endpoint returns specific robot account information by robot ID.
	GetRobotByID(ctx context.Context, params robot.GetRobotByIDParams) middleware.Responder
	// ListRobot is List the robot accounts with the specified level and project.
	ListRobot(ctx context.Context, params robot.ListRobotParams) middleware.Responder
	// RefreshSec is Refresh the robot secret
	RefreshSec(ctx context.Context, params robot.RefreshSecParams) middleware.Responder
	// UpdateRobot is This endpoint updates specific robot account information by robot ID.
	UpdateRobot(ctx context.Context, params robot.UpdateRobotParams) middleware.Responder
}

// go:generate mockery -name Robotv1API -inpkg

// Robotv1API
type Robotv1API interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// CreateRobotV1 is Create a robot account
	CreateRobotV1(ctx context.Context, params robotv1.CreateRobotV1Params) middleware.Responder
	// DeleteRobotV1 is This endpoint deletes specific robot account information by robot ID.
	DeleteRobotV1(ctx context.Context, params robotv1.DeleteRobotV1Params) middleware.Responder
	// GetRobotByIDV1 is This endpoint returns specific robot account information by robot ID.
	GetRobotByIDV1(ctx context.Context, params robotv1.GetRobotByIDV1Params) middleware.Responder
	// ListRobotV1 is Get all robot accounts of specified project
	ListRobotV1(ctx context.Context, params robotv1.ListRobotV1Params) middleware.Responder
	// UpdateRobotV1 is Used to disable/enable a specified robot account.
	UpdateRobotV1(ctx context.Context, params robotv1.UpdateRobotV1Params) middleware.Responder
}

// go:generate mockery -name ScanAPI -inpkg

// ScanAPI
type ScanAPI interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// GetReportLog is Get the log of the scan report
	GetReportLog(ctx context.Context, params scan.GetReportLogParams) middleware.Responder
	// ScanArtifact is Scan the specified artifact
	ScanArtifact(ctx context.Context, params scan.ScanArtifactParams) middleware.Responder
}

// go:generate mockery -name ScanAllAPI -inpkg

// ScanAllAPI
type ScanAllAPI interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// CreateScanAllSchedule is This endpoint is for creating a schedule or a manual trigger for the scan all job, which scans all of images in Harbor.
	CreateScanAllSchedule(ctx context.Context, params scan_all.CreateScanAllScheduleParams) middleware.Responder
	// GetLatestScanAllMetrics is Get the metrics of the latest scan all process
	GetLatestScanAllMetrics(ctx context.Context, params scan_all.GetLatestScanAllMetricsParams) middleware.Responder
	// GetLatestScheduledScanAllMetrics is Get the metrics of the latest scheduled scan all process
	GetLatestScheduledScanAllMetrics(ctx context.Context, params scan_all.GetLatestScheduledScanAllMetricsParams) middleware.Responder
	// GetScanAllSchedule is This endpoint is for getting a schedule for the scan all job, which scans all of images in Harbor.
	GetScanAllSchedule(ctx context.Context, params scan_all.GetScanAllScheduleParams) middleware.Responder
	// UpdateScanAllSchedule is This endpoint is for updating the schedule of scan all job, which scans all of images in Harbor.
	UpdateScanAllSchedule(ctx context.Context, params scan_all.UpdateScanAllScheduleParams) middleware.Responder
}

// go:generate mockery -name SysteminfoAPI -inpkg

// SysteminfoAPI
type SysteminfoAPI interface {
	// Prepare action before the operation
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder
	// GetSysteminfo is This API is for retrieving general system info, this can be called by anonymous request.  Some attributes will be omitted in the response when this API is called by anonymous request.

	GetSysteminfo(ctx context.Context, params systeminfo.GetSysteminfoParams) middleware.Responder
	// GetSysteminfoGetcert is This endpoint is for downloading a default root certificate.

	GetSysteminfoGetcert(ctx context.Context, params systeminfo.GetSysteminfoGetcertParams) middleware.Responder
	// GetSysteminfoVolumes is This endpoint is for retrieving system volume info that only provides for admin user.  Note that the response only reflects the storage status of local disk.

	GetSysteminfoVolumes(ctx context.Context, params systeminfo.GetSysteminfoVolumesParams) middleware.Responder
}

// Config is configuration for Handler
type Config struct {
	ArtifactAPI
	AuditlogAPI
	GCAPI
	IconAPI
	PingAPI
	PreheatAPI
	ProjectAPI
	ReplicationAPI
	RepositoryAPI
	RetentionAPI
	RobotAPI
	Robotv1API
	ScanAPI
	ScanAllAPI
	SysteminfoAPI
	Logger func(string, ...interface{})
	// InnerMiddleware is for the handler executors. These do not apply to the swagger.json document.
	// The middleware executes after routing but before authentication, binding and validation
	InnerMiddleware func(http.Handler) http.Handler

	// Authorizer is used to authorize a request after the Auth function was called using the "Auth*" functions
	// and the principal was stored in the context in the "AuthKey" context value.
	Authorizer func(*http.Request) error

	// AuthBasic for basic authentication
	AuthBasic func(user string, pass string) (interface{}, error)
}

// Handler returns an http.Handler given the handler configuration
// It mounts all the business logic implementers in the right routing.
func Handler(c Config) (http.Handler, error) {
	h, _, err := HandlerAPI(c)
	return h, err
}

// HandlerAPI returns an http.Handler given the handler configuration
// and the corresponding *Harbor instance.
// It mounts all the business logic implementers in the right routing.
func HandlerAPI(c Config) (http.Handler, *operations.HarborAPI, error) {
	spec, err := loads.Analyzed(swaggerCopy(SwaggerJSON), "")
	if err != nil {
		return nil, nil, fmt.Errorf("analyze swagger: %v", err)
	}
	api := operations.NewHarborAPI(spec)
	api.ServeError = errors.ServeError
	api.Logger = c.Logger

	api.JSONConsumer = runtime.JSONConsumer()
	api.JSONProducer = runtime.JSONProducer()
	api.BinProducer = runtime.ByteStreamProducer()
	api.TxtProducer = runtime.TextProducer()
	api.BasicAuth = func(user string, pass string) (interface{}, error) {
		if c.AuthBasic == nil {
			return "", nil
		}
		return c.AuthBasic(user, pass)
	}

	api.APIAuthorizer = authorizer(c.Authorizer)
	api.ArtifactCopyArtifactHandler = artifact.CopyArtifactHandlerFunc(func(params artifact.CopyArtifactParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CopyArtifact", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "CopyArtifact", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.CopyArtifact(ctx, params)
	})
	api.PreheatCreateInstanceHandler = preheat.CreateInstanceHandlerFunc(func(params preheat.CreateInstanceParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateInstance", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "CreateInstance", &params); res != nil {
			return res
		}
		return c.PreheatAPI.CreateInstance(ctx, params)
	})
	api.PreheatCreatePolicyHandler = preheat.CreatePolicyHandlerFunc(func(params preheat.CreatePolicyParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreatePolicy", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "CreatePolicy", &params); res != nil {
			return res
		}
		return c.PreheatAPI.CreatePolicy(ctx, params)
	})
	api.RobotCreateRobotHandler = robot.CreateRobotHandlerFunc(func(params robot.CreateRobotParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateRobot", &params); res != nil {
				return res
			}
		}
		if res := c.RobotAPI.Prepare(ctx, "CreateRobot", &params); res != nil {
			return res
		}
		return c.RobotAPI.CreateRobot(ctx, params)
	})
	api.Robotv1CreateRobotV1Handler = robotv1.CreateRobotV1HandlerFunc(func(params robotv1.CreateRobotV1Params, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateRobotV1", &params); res != nil {
				return res
			}
		}
		if res := c.Robotv1API.Prepare(ctx, "CreateRobotV1", &params); res != nil {
			return res
		}
		return c.Robotv1API.CreateRobotV1(ctx, params)
	})
	api.PreheatDeleteInstanceHandler = preheat.DeleteInstanceHandlerFunc(func(params preheat.DeleteInstanceParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteInstance", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "DeleteInstance", &params); res != nil {
			return res
		}
		return c.PreheatAPI.DeleteInstance(ctx, params)
	})
	api.PreheatDeletePolicyHandler = preheat.DeletePolicyHandlerFunc(func(params preheat.DeletePolicyParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeletePolicy", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "DeletePolicy", &params); res != nil {
			return res
		}
		return c.PreheatAPI.DeletePolicy(ctx, params)
	})
	api.RobotDeleteRobotHandler = robot.DeleteRobotHandlerFunc(func(params robot.DeleteRobotParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteRobot", &params); res != nil {
				return res
			}
		}
		if res := c.RobotAPI.Prepare(ctx, "DeleteRobot", &params); res != nil {
			return res
		}
		return c.RobotAPI.DeleteRobot(ctx, params)
	})
	api.Robotv1DeleteRobotV1Handler = robotv1.DeleteRobotV1HandlerFunc(func(params robotv1.DeleteRobotV1Params, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteRobotV1", &params); res != nil {
				return res
			}
		}
		if res := c.Robotv1API.Prepare(ctx, "DeleteRobotV1", &params); res != nil {
			return res
		}
		return c.Robotv1API.DeleteRobotV1(ctx, params)
	})
	api.PreheatGetExecutionHandler = preheat.GetExecutionHandlerFunc(func(params preheat.GetExecutionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetExecution", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "GetExecution", &params); res != nil {
			return res
		}
		return c.PreheatAPI.GetExecution(ctx, params)
	})
	api.PreheatGetInstanceHandler = preheat.GetInstanceHandlerFunc(func(params preheat.GetInstanceParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetInstance", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "GetInstance", &params); res != nil {
			return res
		}
		return c.PreheatAPI.GetInstance(ctx, params)
	})
	api.PingGetPingHandler = ping.GetPingHandlerFunc(func(params ping.GetPingParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetPing", &params); res != nil {
				return res
			}
		}
		if res := c.PingAPI.Prepare(ctx, "GetPing", &params); res != nil {
			return res
		}
		return c.PingAPI.GetPing(ctx, params)
	})
	api.PreheatGetPolicyHandler = preheat.GetPolicyHandlerFunc(func(params preheat.GetPolicyParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetPolicy", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "GetPolicy", &params); res != nil {
			return res
		}
		return c.PreheatAPI.GetPolicy(ctx, params)
	})
	api.PreheatGetPreheatLogHandler = preheat.GetPreheatLogHandlerFunc(func(params preheat.GetPreheatLogParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetPreheatLog", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "GetPreheatLog", &params); res != nil {
			return res
		}
		return c.PreheatAPI.GetPreheatLog(ctx, params)
	})
	api.RobotGetRobotByIDHandler = robot.GetRobotByIDHandlerFunc(func(params robot.GetRobotByIDParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetRobotByID", &params); res != nil {
				return res
			}
		}
		if res := c.RobotAPI.Prepare(ctx, "GetRobotByID", &params); res != nil {
			return res
		}
		return c.RobotAPI.GetRobotByID(ctx, params)
	})
	api.Robotv1GetRobotByIDV1Handler = robotv1.GetRobotByIDV1HandlerFunc(func(params robotv1.GetRobotByIDV1Params, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetRobotByIDV1", &params); res != nil {
				return res
			}
		}
		if res := c.Robotv1API.Prepare(ctx, "GetRobotByIDV1", &params); res != nil {
			return res
		}
		return c.Robotv1API.GetRobotByIDV1(ctx, params)
	})
	api.SysteminfoGetSysteminfoHandler = systeminfo.GetSysteminfoHandlerFunc(func(params systeminfo.GetSysteminfoParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetSysteminfo", &params); res != nil {
				return res
			}
		}
		if res := c.SysteminfoAPI.Prepare(ctx, "GetSysteminfo", &params); res != nil {
			return res
		}
		return c.SysteminfoAPI.GetSysteminfo(ctx, params)
	})
	api.SysteminfoGetSysteminfoGetcertHandler = systeminfo.GetSysteminfoGetcertHandlerFunc(func(params systeminfo.GetSysteminfoGetcertParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetSysteminfoGetcert", &params); res != nil {
				return res
			}
		}
		if res := c.SysteminfoAPI.Prepare(ctx, "GetSysteminfoGetcert", &params); res != nil {
			return res
		}
		return c.SysteminfoAPI.GetSysteminfoGetcert(ctx, params)
	})
	api.SysteminfoGetSysteminfoVolumesHandler = systeminfo.GetSysteminfoVolumesHandlerFunc(func(params systeminfo.GetSysteminfoVolumesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetSysteminfoVolumes", &params); res != nil {
				return res
			}
		}
		if res := c.SysteminfoAPI.Prepare(ctx, "GetSysteminfoVolumes", &params); res != nil {
			return res
		}
		return c.SysteminfoAPI.GetSysteminfoVolumes(ctx, params)
	})
	api.PreheatListExecutionsHandler = preheat.ListExecutionsHandlerFunc(func(params preheat.ListExecutionsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListExecutions", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "ListExecutions", &params); res != nil {
			return res
		}
		return c.PreheatAPI.ListExecutions(ctx, params)
	})
	api.PreheatListInstancesHandler = preheat.ListInstancesHandlerFunc(func(params preheat.ListInstancesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListInstances", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "ListInstances", &params); res != nil {
			return res
		}
		return c.PreheatAPI.ListInstances(ctx, params)
	})
	api.PreheatListPoliciesHandler = preheat.ListPoliciesHandlerFunc(func(params preheat.ListPoliciesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListPolicies", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "ListPolicies", &params); res != nil {
			return res
		}
		return c.PreheatAPI.ListPolicies(ctx, params)
	})
	api.PreheatListProvidersHandler = preheat.ListProvidersHandlerFunc(func(params preheat.ListProvidersParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListProviders", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "ListProviders", &params); res != nil {
			return res
		}
		return c.PreheatAPI.ListProviders(ctx, params)
	})
	api.PreheatListProvidersUnderProjectHandler = preheat.ListProvidersUnderProjectHandlerFunc(func(params preheat.ListProvidersUnderProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListProvidersUnderProject", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "ListProvidersUnderProject", &params); res != nil {
			return res
		}
		return c.PreheatAPI.ListProvidersUnderProject(ctx, params)
	})
	api.RobotListRobotHandler = robot.ListRobotHandlerFunc(func(params robot.ListRobotParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListRobot", &params); res != nil {
				return res
			}
		}
		if res := c.RobotAPI.Prepare(ctx, "ListRobot", &params); res != nil {
			return res
		}
		return c.RobotAPI.ListRobot(ctx, params)
	})
	api.Robotv1ListRobotV1Handler = robotv1.ListRobotV1HandlerFunc(func(params robotv1.ListRobotV1Params, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListRobotV1", &params); res != nil {
				return res
			}
		}
		if res := c.Robotv1API.Prepare(ctx, "ListRobotV1", &params); res != nil {
			return res
		}
		return c.Robotv1API.ListRobotV1(ctx, params)
	})
	api.PreheatListTasksHandler = preheat.ListTasksHandlerFunc(func(params preheat.ListTasksParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListTasks", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "ListTasks", &params); res != nil {
			return res
		}
		return c.PreheatAPI.ListTasks(ctx, params)
	})
	api.PreheatManualPreheatHandler = preheat.ManualPreheatHandlerFunc(func(params preheat.ManualPreheatParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ManualPreheat", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "ManualPreheat", &params); res != nil {
			return res
		}
		return c.PreheatAPI.ManualPreheat(ctx, params)
	})
	api.PreheatPingInstancesHandler = preheat.PingInstancesHandlerFunc(func(params preheat.PingInstancesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "PingInstances", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "PingInstances", &params); res != nil {
			return res
		}
		return c.PreheatAPI.PingInstances(ctx, params)
	})
	api.RobotRefreshSecHandler = robot.RefreshSecHandlerFunc(func(params robot.RefreshSecParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "RefreshSec", &params); res != nil {
				return res
			}
		}
		if res := c.RobotAPI.Prepare(ctx, "RefreshSec", &params); res != nil {
			return res
		}
		return c.RobotAPI.RefreshSec(ctx, params)
	})
	api.PreheatStopExecutionHandler = preheat.StopExecutionHandlerFunc(func(params preheat.StopExecutionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "StopExecution", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "StopExecution", &params); res != nil {
			return res
		}
		return c.PreheatAPI.StopExecution(ctx, params)
	})
	api.PreheatUpdateInstanceHandler = preheat.UpdateInstanceHandlerFunc(func(params preheat.UpdateInstanceParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateInstance", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "UpdateInstance", &params); res != nil {
			return res
		}
		return c.PreheatAPI.UpdateInstance(ctx, params)
	})
	api.PreheatUpdatePolicyHandler = preheat.UpdatePolicyHandlerFunc(func(params preheat.UpdatePolicyParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdatePolicy", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "UpdatePolicy", &params); res != nil {
			return res
		}
		return c.PreheatAPI.UpdatePolicy(ctx, params)
	})
	api.RobotUpdateRobotHandler = robot.UpdateRobotHandlerFunc(func(params robot.UpdateRobotParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateRobot", &params); res != nil {
				return res
			}
		}
		if res := c.RobotAPI.Prepare(ctx, "UpdateRobot", &params); res != nil {
			return res
		}
		return c.RobotAPI.UpdateRobot(ctx, params)
	})
	api.Robotv1UpdateRobotV1Handler = robotv1.UpdateRobotV1HandlerFunc(func(params robotv1.UpdateRobotV1Params, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateRobotV1", &params); res != nil {
				return res
			}
		}
		if res := c.Robotv1API.Prepare(ctx, "UpdateRobotV1", &params); res != nil {
			return res
		}
		return c.Robotv1API.UpdateRobotV1(ctx, params)
	})
	api.ArtifactAddLabelHandler = artifact.AddLabelHandlerFunc(func(params artifact.AddLabelParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "AddLabel", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "AddLabel", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.AddLabel(ctx, params)
	})
	api.GCCreateGCScheduleHandler = gc.CreateGCScheduleHandlerFunc(func(params gc.CreateGCScheduleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateGCSchedule", &params); res != nil {
				return res
			}
		}
		if res := c.GCAPI.Prepare(ctx, "CreateGCSchedule", &params); res != nil {
			return res
		}
		return c.GCAPI.CreateGCSchedule(ctx, params)
	})
	api.ProjectCreateProjectHandler = project.CreateProjectHandlerFunc(func(params project.CreateProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateProject", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "CreateProject", &params); res != nil {
			return res
		}
		return c.ProjectAPI.CreateProject(ctx, params)
	})
	api.RetentionCreateRetentionHandler = retention.CreateRetentionHandlerFunc(func(params retention.CreateRetentionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateRetention", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "CreateRetention", &params); res != nil {
			return res
		}
		return c.RetentionAPI.CreateRetention(ctx, params)
	})
	api.ScanAllCreateScanAllScheduleHandler = scan_all.CreateScanAllScheduleHandlerFunc(func(params scan_all.CreateScanAllScheduleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateScanAllSchedule", &params); res != nil {
				return res
			}
		}
		if res := c.ScanAllAPI.Prepare(ctx, "CreateScanAllSchedule", &params); res != nil {
			return res
		}
		return c.ScanAllAPI.CreateScanAllSchedule(ctx, params)
	})
	api.ArtifactCreateTagHandler = artifact.CreateTagHandlerFunc(func(params artifact.CreateTagParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateTag", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "CreateTag", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.CreateTag(ctx, params)
	})
	api.ArtifactDeleteArtifactHandler = artifact.DeleteArtifactHandlerFunc(func(params artifact.DeleteArtifactParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteArtifact", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "DeleteArtifact", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.DeleteArtifact(ctx, params)
	})
	api.ProjectDeleteProjectHandler = project.DeleteProjectHandlerFunc(func(params project.DeleteProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteProject", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "DeleteProject", &params); res != nil {
			return res
		}
		return c.ProjectAPI.DeleteProject(ctx, params)
	})
	api.RepositoryDeleteRepositoryHandler = repository.DeleteRepositoryHandlerFunc(func(params repository.DeleteRepositoryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteRepository", &params); res != nil {
				return res
			}
		}
		if res := c.RepositoryAPI.Prepare(ctx, "DeleteRepository", &params); res != nil {
			return res
		}
		return c.RepositoryAPI.DeleteRepository(ctx, params)
	})
	api.ArtifactDeleteTagHandler = artifact.DeleteTagHandlerFunc(func(params artifact.DeleteTagParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteTag", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "DeleteTag", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.DeleteTag(ctx, params)
	})
	api.ArtifactGetAdditionHandler = artifact.GetAdditionHandlerFunc(func(params artifact.GetAdditionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetAddition", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "GetAddition", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.GetAddition(ctx, params)
	})
	api.ArtifactGetArtifactHandler = artifact.GetArtifactHandlerFunc(func(params artifact.GetArtifactParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetArtifact", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "GetArtifact", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.GetArtifact(ctx, params)
	})
	api.GCGetGCHandler = gc.GetGCHandlerFunc(func(params gc.GetGCParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetGC", &params); res != nil {
				return res
			}
		}
		if res := c.GCAPI.Prepare(ctx, "GetGC", &params); res != nil {
			return res
		}
		return c.GCAPI.GetGC(ctx, params)
	})
	api.GCGetGCHistoryHandler = gc.GetGCHistoryHandlerFunc(func(params gc.GetGCHistoryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetGCHistory", &params); res != nil {
				return res
			}
		}
		if res := c.GCAPI.Prepare(ctx, "GetGCHistory", &params); res != nil {
			return res
		}
		return c.GCAPI.GetGCHistory(ctx, params)
	})
	api.GCGetGCLogHandler = gc.GetGCLogHandlerFunc(func(params gc.GetGCLogParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetGCLog", &params); res != nil {
				return res
			}
		}
		if res := c.GCAPI.Prepare(ctx, "GetGCLog", &params); res != nil {
			return res
		}
		return c.GCAPI.GetGCLog(ctx, params)
	})
	api.GCGetGCScheduleHandler = gc.GetGCScheduleHandlerFunc(func(params gc.GetGCScheduleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetGCSchedule", &params); res != nil {
				return res
			}
		}
		if res := c.GCAPI.Prepare(ctx, "GetGCSchedule", &params); res != nil {
			return res
		}
		return c.GCAPI.GetGCSchedule(ctx, params)
	})
	api.IconGetIconHandler = icon.GetIconHandlerFunc(func(params icon.GetIconParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetIcon", &params); res != nil {
				return res
			}
		}
		if res := c.IconAPI.Prepare(ctx, "GetIcon", &params); res != nil {
			return res
		}
		return c.IconAPI.GetIcon(ctx, params)
	})
	api.ScanAllGetLatestScanAllMetricsHandler = scan_all.GetLatestScanAllMetricsHandlerFunc(func(params scan_all.GetLatestScanAllMetricsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetLatestScanAllMetrics", &params); res != nil {
				return res
			}
		}
		if res := c.ScanAllAPI.Prepare(ctx, "GetLatestScanAllMetrics", &params); res != nil {
			return res
		}
		return c.ScanAllAPI.GetLatestScanAllMetrics(ctx, params)
	})
	api.ScanAllGetLatestScheduledScanAllMetricsHandler = scan_all.GetLatestScheduledScanAllMetricsHandlerFunc(func(params scan_all.GetLatestScheduledScanAllMetricsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetLatestScheduledScanAllMetrics", &params); res != nil {
				return res
			}
		}
		if res := c.ScanAllAPI.Prepare(ctx, "GetLatestScheduledScanAllMetrics", &params); res != nil {
			return res
		}
		return c.ScanAllAPI.GetLatestScheduledScanAllMetrics(ctx, params)
	})
	api.ProjectGetLogsHandler = project.GetLogsHandlerFunc(func(params project.GetLogsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetLogs", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "GetLogs", &params); res != nil {
			return res
		}
		return c.ProjectAPI.GetLogs(ctx, params)
	})
	api.ProjectGetProjectHandler = project.GetProjectHandlerFunc(func(params project.GetProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetProject", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "GetProject", &params); res != nil {
			return res
		}
		return c.ProjectAPI.GetProject(ctx, params)
	})
	api.ProjectGetProjectDeletableHandler = project.GetProjectDeletableHandlerFunc(func(params project.GetProjectDeletableParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetProjectDeletable", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "GetProjectDeletable", &params); res != nil {
			return res
		}
		return c.ProjectAPI.GetProjectDeletable(ctx, params)
	})
	api.ProjectGetProjectSummaryHandler = project.GetProjectSummaryHandlerFunc(func(params project.GetProjectSummaryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetProjectSummary", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "GetProjectSummary", &params); res != nil {
			return res
		}
		return c.ProjectAPI.GetProjectSummary(ctx, params)
	})
	api.RetentionGetRentenitionMetadataHandler = retention.GetRentenitionMetadataHandlerFunc(func(params retention.GetRentenitionMetadataParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetRentenitionMetadata", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "GetRentenitionMetadata", &params); res != nil {
			return res
		}
		return c.RetentionAPI.GetRentenitionMetadata(ctx, params)
	})
	api.ReplicationGetReplicationExecutionHandler = replication.GetReplicationExecutionHandlerFunc(func(params replication.GetReplicationExecutionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetReplicationExecution", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "GetReplicationExecution", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.GetReplicationExecution(ctx, params)
	})
	api.ReplicationGetReplicationLogHandler = replication.GetReplicationLogHandlerFunc(func(params replication.GetReplicationLogParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetReplicationLog", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "GetReplicationLog", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.GetReplicationLog(ctx, params)
	})
	api.ScanGetReportLogHandler = scan.GetReportLogHandlerFunc(func(params scan.GetReportLogParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetReportLog", &params); res != nil {
				return res
			}
		}
		if res := c.ScanAPI.Prepare(ctx, "GetReportLog", &params); res != nil {
			return res
		}
		return c.ScanAPI.GetReportLog(ctx, params)
	})
	api.RepositoryGetRepositoryHandler = repository.GetRepositoryHandlerFunc(func(params repository.GetRepositoryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetRepository", &params); res != nil {
				return res
			}
		}
		if res := c.RepositoryAPI.Prepare(ctx, "GetRepository", &params); res != nil {
			return res
		}
		return c.RepositoryAPI.GetRepository(ctx, params)
	})
	api.RetentionGetRetentionHandler = retention.GetRetentionHandlerFunc(func(params retention.GetRetentionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetRetention", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "GetRetention", &params); res != nil {
			return res
		}
		return c.RetentionAPI.GetRetention(ctx, params)
	})
	api.RetentionGetRetentionTaskLogHandler = retention.GetRetentionTaskLogHandlerFunc(func(params retention.GetRetentionTaskLogParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetRetentionTaskLog", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "GetRetentionTaskLog", &params); res != nil {
			return res
		}
		return c.RetentionAPI.GetRetentionTaskLog(ctx, params)
	})
	api.ScanAllGetScanAllScheduleHandler = scan_all.GetScanAllScheduleHandlerFunc(func(params scan_all.GetScanAllScheduleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetScanAllSchedule", &params); res != nil {
				return res
			}
		}
		if res := c.ScanAllAPI.Prepare(ctx, "GetScanAllSchedule", &params); res != nil {
			return res
		}
		return c.ScanAllAPI.GetScanAllSchedule(ctx, params)
	})
	api.ArtifactGetVulnerabilitiesAdditionHandler = artifact.GetVulnerabilitiesAdditionHandlerFunc(func(params artifact.GetVulnerabilitiesAdditionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetVulnerabilitiesAddition", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "GetVulnerabilitiesAddition", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.GetVulnerabilitiesAddition(ctx, params)
	})
	api.ProjectHeadProjectHandler = project.HeadProjectHandlerFunc(func(params project.HeadProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "HeadProject", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "HeadProject", &params); res != nil {
			return res
		}
		return c.ProjectAPI.HeadProject(ctx, params)
	})
	api.ArtifactListArtifactsHandler = artifact.ListArtifactsHandlerFunc(func(params artifact.ListArtifactsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListArtifacts", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "ListArtifacts", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.ListArtifacts(ctx, params)
	})
	api.AuditlogListAuditLogsHandler = auditlog.ListAuditLogsHandlerFunc(func(params auditlog.ListAuditLogsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListAuditLogs", &params); res != nil {
				return res
			}
		}
		if res := c.AuditlogAPI.Prepare(ctx, "ListAuditLogs", &params); res != nil {
			return res
		}
		return c.AuditlogAPI.ListAuditLogs(ctx, params)
	})
	api.ProjectListProjectsHandler = project.ListProjectsHandlerFunc(func(params project.ListProjectsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListProjects", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "ListProjects", &params); res != nil {
			return res
		}
		return c.ProjectAPI.ListProjects(ctx, params)
	})
	api.ReplicationListReplicationExecutionsHandler = replication.ListReplicationExecutionsHandlerFunc(func(params replication.ListReplicationExecutionsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListReplicationExecutions", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "ListReplicationExecutions", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.ListReplicationExecutions(ctx, params)
	})
	api.ReplicationListReplicationTasksHandler = replication.ListReplicationTasksHandlerFunc(func(params replication.ListReplicationTasksParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListReplicationTasks", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "ListReplicationTasks", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.ListReplicationTasks(ctx, params)
	})
	api.RepositoryListRepositoriesHandler = repository.ListRepositoriesHandlerFunc(func(params repository.ListRepositoriesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListRepositories", &params); res != nil {
				return res
			}
		}
		if res := c.RepositoryAPI.Prepare(ctx, "ListRepositories", &params); res != nil {
			return res
		}
		return c.RepositoryAPI.ListRepositories(ctx, params)
	})
	api.RetentionListRetentionExecutionsHandler = retention.ListRetentionExecutionsHandlerFunc(func(params retention.ListRetentionExecutionsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListRetentionExecutions", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "ListRetentionExecutions", &params); res != nil {
			return res
		}
		return c.RetentionAPI.ListRetentionExecutions(ctx, params)
	})
	api.RetentionListRetentionTasksHandler = retention.ListRetentionTasksHandlerFunc(func(params retention.ListRetentionTasksParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListRetentionTasks", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "ListRetentionTasks", &params); res != nil {
			return res
		}
		return c.RetentionAPI.ListRetentionTasks(ctx, params)
	})
	api.ArtifactListTagsHandler = artifact.ListTagsHandlerFunc(func(params artifact.ListTagsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListTags", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "ListTags", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.ListTags(ctx, params)
	})
	api.RetentionOperateRetentionExecutionHandler = retention.OperateRetentionExecutionHandlerFunc(func(params retention.OperateRetentionExecutionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "OperateRetentionExecution", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "OperateRetentionExecution", &params); res != nil {
			return res
		}
		return c.RetentionAPI.OperateRetentionExecution(ctx, params)
	})
	api.ArtifactRemoveLabelHandler = artifact.RemoveLabelHandlerFunc(func(params artifact.RemoveLabelParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "RemoveLabel", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "RemoveLabel", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.RemoveLabel(ctx, params)
	})
	api.ScanScanArtifactHandler = scan.ScanArtifactHandlerFunc(func(params scan.ScanArtifactParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ScanArtifact", &params); res != nil {
				return res
			}
		}
		if res := c.ScanAPI.Prepare(ctx, "ScanArtifact", &params); res != nil {
			return res
		}
		return c.ScanAPI.ScanArtifact(ctx, params)
	})
	api.ReplicationStartReplicationHandler = replication.StartReplicationHandlerFunc(func(params replication.StartReplicationParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "StartReplication", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "StartReplication", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.StartReplication(ctx, params)
	})
	api.ReplicationStopReplicationHandler = replication.StopReplicationHandlerFunc(func(params replication.StopReplicationParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "StopReplication", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "StopReplication", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.StopReplication(ctx, params)
	})
	api.RetentionTriggerRetentionExecutionHandler = retention.TriggerRetentionExecutionHandlerFunc(func(params retention.TriggerRetentionExecutionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "TriggerRetentionExecution", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "TriggerRetentionExecution", &params); res != nil {
			return res
		}
		return c.RetentionAPI.TriggerRetentionExecution(ctx, params)
	})
	api.GCUpdateGCScheduleHandler = gc.UpdateGCScheduleHandlerFunc(func(params gc.UpdateGCScheduleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateGCSchedule", &params); res != nil {
				return res
			}
		}
		if res := c.GCAPI.Prepare(ctx, "UpdateGCSchedule", &params); res != nil {
			return res
		}
		return c.GCAPI.UpdateGCSchedule(ctx, params)
	})
	api.ProjectUpdateProjectHandler = project.UpdateProjectHandlerFunc(func(params project.UpdateProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateProject", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "UpdateProject", &params); res != nil {
			return res
		}
		return c.ProjectAPI.UpdateProject(ctx, params)
	})
	api.RepositoryUpdateRepositoryHandler = repository.UpdateRepositoryHandlerFunc(func(params repository.UpdateRepositoryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateRepository", &params); res != nil {
				return res
			}
		}
		if res := c.RepositoryAPI.Prepare(ctx, "UpdateRepository", &params); res != nil {
			return res
		}
		return c.RepositoryAPI.UpdateRepository(ctx, params)
	})
	api.RetentionUpdateRetentionHandler = retention.UpdateRetentionHandlerFunc(func(params retention.UpdateRetentionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateRetention", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "UpdateRetention", &params); res != nil {
			return res
		}
		return c.RetentionAPI.UpdateRetention(ctx, params)
	})
	api.ScanAllUpdateScanAllScheduleHandler = scan_all.UpdateScanAllScheduleHandlerFunc(func(params scan_all.UpdateScanAllScheduleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateScanAllSchedule", &params); res != nil {
				return res
			}
		}
		if res := c.ScanAllAPI.Prepare(ctx, "UpdateScanAllSchedule", &params); res != nil {
			return res
		}
		return c.ScanAllAPI.UpdateScanAllSchedule(ctx, params)
	})
	api.ServerShutdown = func() {}
	return api.Serve(c.InnerMiddleware), api, nil
}

// swaggerCopy copies the swagger json to prevent data races in runtime
func swaggerCopy(orig json.RawMessage) json.RawMessage {
	c := make(json.RawMessage, len(orig))
	copy(c, orig)
	return c
}

// authorizer is a helper function to implement the runtime.Authorizer interface.
type authorizer func(*http.Request) error

func (a authorizer) Authorize(req *http.Request, principal interface{}) error {
	if a == nil {
		return nil
	}
	ctx := storeAuth(req.Context(), principal)
	return a(req.WithContext(ctx))
}

func storeAuth(ctx context.Context, principal interface{}) context.Context {
	return context.WithValue(ctx, AuthKey, principal)
}
